
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model RequestType
 * 
 */
export type RequestType = $Result.DefaultSelection<Prisma.$RequestTypePayload>
/**
 * Model Request
 * 
 */
export type Request = $Result.DefaultSelection<Prisma.$RequestPayload>
/**
 * Model RequestEvent
 * 
 */
export type RequestEvent = $Result.DefaultSelection<Prisma.$RequestEventPayload>
/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model SLAConfig
 * 
 */
export type SLAConfig = $Result.DefaultSelection<Prisma.$SLAConfigPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.requestType`: Exposes CRUD operations for the **RequestType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestTypes
    * const requestTypes = await prisma.requestType.findMany()
    * ```
    */
  get requestType(): Prisma.RequestTypeDelegate<ExtArgs>;

  /**
   * `prisma.request`: Exposes CRUD operations for the **Request** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Requests
    * const requests = await prisma.request.findMany()
    * ```
    */
  get request(): Prisma.RequestDelegate<ExtArgs>;

  /**
   * `prisma.requestEvent`: Exposes CRUD operations for the **RequestEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestEvents
    * const requestEvents = await prisma.requestEvent.findMany()
    * ```
    */
  get requestEvent(): Prisma.RequestEventDelegate<ExtArgs>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs>;

  /**
   * `prisma.sLAConfig`: Exposes CRUD operations for the **SLAConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SLAConfigs
    * const sLAConfigs = await prisma.sLAConfig.findMany()
    * ```
    */
  get sLAConfig(): Prisma.SLAConfigDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Team: 'Team',
    RequestType: 'RequestType',
    Request: 'Request',
    RequestEvent: 'RequestEvent',
    Attachment: 'Attachment',
    SLAConfig: 'SLAConfig',
    Schedule: 'Schedule',
    Subscription: 'Subscription'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "team" | "requestType" | "request" | "requestEvent" | "attachment" | "sLAConfig" | "schedule" | "subscription"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      RequestType: {
        payload: Prisma.$RequestTypePayload<ExtArgs>
        fields: Prisma.RequestTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>
          }
          findFirst: {
            args: Prisma.RequestTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>
          }
          findMany: {
            args: Prisma.RequestTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>[]
          }
          create: {
            args: Prisma.RequestTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>
          }
          createMany: {
            args: Prisma.RequestTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>[]
          }
          delete: {
            args: Prisma.RequestTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>
          }
          update: {
            args: Prisma.RequestTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>
          }
          deleteMany: {
            args: Prisma.RequestTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestTypePayload>
          }
          aggregate: {
            args: Prisma.RequestTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestType>
          }
          groupBy: {
            args: Prisma.RequestTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestTypeCountArgs<ExtArgs>
            result: $Utils.Optional<RequestTypeCountAggregateOutputType> | number
          }
        }
      }
      Request: {
        payload: Prisma.$RequestPayload<ExtArgs>
        fields: Prisma.RequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          findFirst: {
            args: Prisma.RequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          findMany: {
            args: Prisma.RequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>[]
          }
          create: {
            args: Prisma.RequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          createMany: {
            args: Prisma.RequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>[]
          }
          delete: {
            args: Prisma.RequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          update: {
            args: Prisma.RequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          deleteMany: {
            args: Prisma.RequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPayload>
          }
          aggregate: {
            args: Prisma.RequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequest>
          }
          groupBy: {
            args: Prisma.RequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestCountArgs<ExtArgs>
            result: $Utils.Optional<RequestCountAggregateOutputType> | number
          }
        }
      }
      RequestEvent: {
        payload: Prisma.$RequestEventPayload<ExtArgs>
        fields: Prisma.RequestEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>
          }
          findFirst: {
            args: Prisma.RequestEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>
          }
          findMany: {
            args: Prisma.RequestEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>[]
          }
          create: {
            args: Prisma.RequestEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>
          }
          createMany: {
            args: Prisma.RequestEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>[]
          }
          delete: {
            args: Prisma.RequestEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>
          }
          update: {
            args: Prisma.RequestEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>
          }
          deleteMany: {
            args: Prisma.RequestEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestEventPayload>
          }
          aggregate: {
            args: Prisma.RequestEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestEvent>
          }
          groupBy: {
            args: Prisma.RequestEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestEventCountArgs<ExtArgs>
            result: $Utils.Optional<RequestEventCountAggregateOutputType> | number
          }
        }
      }
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      SLAConfig: {
        payload: Prisma.$SLAConfigPayload<ExtArgs>
        fields: Prisma.SLAConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SLAConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SLAConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>
          }
          findFirst: {
            args: Prisma.SLAConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SLAConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>
          }
          findMany: {
            args: Prisma.SLAConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>[]
          }
          create: {
            args: Prisma.SLAConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>
          }
          createMany: {
            args: Prisma.SLAConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SLAConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>[]
          }
          delete: {
            args: Prisma.SLAConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>
          }
          update: {
            args: Prisma.SLAConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>
          }
          deleteMany: {
            args: Prisma.SLAConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SLAConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SLAConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SLAConfigPayload>
          }
          aggregate: {
            args: Prisma.SLAConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSLAConfig>
          }
          groupBy: {
            args: Prisma.SLAConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SLAConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SLAConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SLAConfigCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    requestsCreated: number
    requestsAssigned: number
    events: number
    subscriptions: number
    attachmentsUploaded: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestsCreated?: boolean | UserCountOutputTypeCountRequestsCreatedArgs
    requestsAssigned?: boolean | UserCountOutputTypeCountRequestsAssignedArgs
    events?: boolean | UserCountOutputTypeCountEventsArgs
    subscriptions?: boolean | UserCountOutputTypeCountSubscriptionsArgs
    attachmentsUploaded?: boolean | UserCountOutputTypeCountAttachmentsUploadedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestsAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttachmentsUploadedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    users: number
    slaConfigs: number
    schedules: number
    requests: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TeamCountOutputTypeCountUsersArgs
    slaConfigs?: boolean | TeamCountOutputTypeCountSlaConfigsArgs
    schedules?: boolean | TeamCountOutputTypeCountSchedulesArgs
    requests?: boolean | TeamCountOutputTypeCountRequestsArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSlaConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SLAConfigWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
  }


  /**
   * Count Type RequestTypeCountOutputType
   */

  export type RequestTypeCountOutputType = {
    requests: number
    slaConfigs: number
  }

  export type RequestTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requests?: boolean | RequestTypeCountOutputTypeCountRequestsArgs
    slaConfigs?: boolean | RequestTypeCountOutputTypeCountSlaConfigsArgs
  }

  // Custom InputTypes
  /**
   * RequestTypeCountOutputType without action
   */
  export type RequestTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestTypeCountOutputType
     */
    select?: RequestTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RequestTypeCountOutputType without action
   */
  export type RequestTypeCountOutputTypeCountRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
  }

  /**
   * RequestTypeCountOutputType without action
   */
  export type RequestTypeCountOutputTypeCountSlaConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SLAConfigWhereInput
  }


  /**
   * Count Type RequestCountOutputType
   */

  export type RequestCountOutputType = {
    events: number
    attachments: number
    subscriptions: number
  }

  export type RequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | RequestCountOutputTypeCountEventsArgs
    attachments?: boolean | RequestCountOutputTypeCountAttachmentsArgs
    subscriptions?: boolean | RequestCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestCountOutputType
     */
    select?: RequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestEventWhereInput
  }

  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * RequestCountOutputType without action
   */
  export type RequestCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    teamId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    teamId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    teamId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    teamId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    teamId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    teamId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: string
    teamId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    teamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | User$teamArgs<ExtArgs>
    requestsCreated?: boolean | User$requestsCreatedArgs<ExtArgs>
    requestsAssigned?: boolean | User$requestsAssignedArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    attachmentsUploaded?: boolean | User$attachmentsUploadedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    teamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | User$teamArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    teamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | User$teamArgs<ExtArgs>
    requestsCreated?: boolean | User$requestsCreatedArgs<ExtArgs>
    requestsAssigned?: boolean | User$requestsAssignedArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    attachmentsUploaded?: boolean | User$attachmentsUploadedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | User$teamArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs> | null
      requestsCreated: Prisma.$RequestPayload<ExtArgs>[]
      requestsAssigned: Prisma.$RequestPayload<ExtArgs>[]
      events: Prisma.$RequestEventPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      attachmentsUploaded: Prisma.$AttachmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      role: string
      teamId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends User$teamArgs<ExtArgs> = {}>(args?: Subset<T, User$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    requestsCreated<T extends User$requestsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$requestsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany"> | Null>
    requestsAssigned<T extends User$requestsAssignedArgs<ExtArgs> = {}>(args?: Subset<T, User$requestsAssignedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findMany"> | Null>
    subscriptions<T extends User$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    attachmentsUploaded<T extends User$attachmentsUploadedArgs<ExtArgs> = {}>(args?: Subset<T, User$attachmentsUploadedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly teamId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.team
   */
  export type User$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * User.requestsCreated
   */
  export type User$requestsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    cursor?: RequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * User.requestsAssigned
   */
  export type User$requestsAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    cursor?: RequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    where?: RequestEventWhereInput
    orderBy?: RequestEventOrderByWithRelationInput | RequestEventOrderByWithRelationInput[]
    cursor?: RequestEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestEventScalarFieldEnum | RequestEventScalarFieldEnum[]
  }

  /**
   * User.subscriptions
   */
  export type User$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.attachmentsUploaded
   */
  export type User$attachmentsUploadedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    name: string
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Team$usersArgs<ExtArgs>
    slaConfigs?: boolean | Team$slaConfigsArgs<ExtArgs>
    schedules?: boolean | Team$schedulesArgs<ExtArgs>
    requests?: boolean | Team$requestsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Team$usersArgs<ExtArgs>
    slaConfigs?: boolean | Team$slaConfigsArgs<ExtArgs>
    schedules?: boolean | Team$schedulesArgs<ExtArgs>
    requests?: boolean | Team$requestsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      slaConfigs: Prisma.$SLAConfigPayload<ExtArgs>[]
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
      requests: Prisma.$RequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Team$usersArgs<ExtArgs> = {}>(args?: Subset<T, Team$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    slaConfigs<T extends Team$slaConfigsArgs<ExtArgs> = {}>(args?: Subset<T, Team$slaConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findMany"> | Null>
    schedules<T extends Team$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Team$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    requests<T extends Team$requestsArgs<ExtArgs> = {}>(args?: Subset<T, Team$requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.users
   */
  export type Team$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Team.slaConfigs
   */
  export type Team$slaConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    where?: SLAConfigWhereInput
    orderBy?: SLAConfigOrderByWithRelationInput | SLAConfigOrderByWithRelationInput[]
    cursor?: SLAConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SLAConfigScalarFieldEnum | SLAConfigScalarFieldEnum[]
  }

  /**
   * Team.schedules
   */
  export type Team$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Team.requests
   */
  export type Team$requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    cursor?: RequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model RequestType
   */

  export type AggregateRequestType = {
    _count: RequestTypeCountAggregateOutputType | null
    _avg: RequestTypeAvgAggregateOutputType | null
    _sum: RequestTypeSumAggregateOutputType | null
    _min: RequestTypeMinAggregateOutputType | null
    _max: RequestTypeMaxAggregateOutputType | null
  }

  export type RequestTypeAvgAggregateOutputType = {
    defaultSlaMinutes: number | null
  }

  export type RequestTypeSumAggregateOutputType = {
    defaultSlaMinutes: number | null
  }

  export type RequestTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    schemaJson: string | null
    defaultSlaMinutes: number | null
  }

  export type RequestTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    schemaJson: string | null
    defaultSlaMinutes: number | null
  }

  export type RequestTypeCountAggregateOutputType = {
    id: number
    name: number
    schemaJson: number
    defaultSlaMinutes: number
    _all: number
  }


  export type RequestTypeAvgAggregateInputType = {
    defaultSlaMinutes?: true
  }

  export type RequestTypeSumAggregateInputType = {
    defaultSlaMinutes?: true
  }

  export type RequestTypeMinAggregateInputType = {
    id?: true
    name?: true
    schemaJson?: true
    defaultSlaMinutes?: true
  }

  export type RequestTypeMaxAggregateInputType = {
    id?: true
    name?: true
    schemaJson?: true
    defaultSlaMinutes?: true
  }

  export type RequestTypeCountAggregateInputType = {
    id?: true
    name?: true
    schemaJson?: true
    defaultSlaMinutes?: true
    _all?: true
  }

  export type RequestTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestType to aggregate.
     */
    where?: RequestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTypes to fetch.
     */
    orderBy?: RequestTypeOrderByWithRelationInput | RequestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestTypes
    **/
    _count?: true | RequestTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestTypeMaxAggregateInputType
  }

  export type GetRequestTypeAggregateType<T extends RequestTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestType[P]>
      : GetScalarType<T[P], AggregateRequestType[P]>
  }




  export type RequestTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestTypeWhereInput
    orderBy?: RequestTypeOrderByWithAggregationInput | RequestTypeOrderByWithAggregationInput[]
    by: RequestTypeScalarFieldEnum[] | RequestTypeScalarFieldEnum
    having?: RequestTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestTypeCountAggregateInputType | true
    _avg?: RequestTypeAvgAggregateInputType
    _sum?: RequestTypeSumAggregateInputType
    _min?: RequestTypeMinAggregateInputType
    _max?: RequestTypeMaxAggregateInputType
  }

  export type RequestTypeGroupByOutputType = {
    id: string
    name: string
    schemaJson: string
    defaultSlaMinutes: number
    _count: RequestTypeCountAggregateOutputType | null
    _avg: RequestTypeAvgAggregateOutputType | null
    _sum: RequestTypeSumAggregateOutputType | null
    _min: RequestTypeMinAggregateOutputType | null
    _max: RequestTypeMaxAggregateOutputType | null
  }

  type GetRequestTypeGroupByPayload<T extends RequestTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestTypeGroupByOutputType[P]>
            : GetScalarType<T[P], RequestTypeGroupByOutputType[P]>
        }
      >
    >


  export type RequestTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    schemaJson?: boolean
    defaultSlaMinutes?: boolean
    requests?: boolean | RequestType$requestsArgs<ExtArgs>
    slaConfigs?: boolean | RequestType$slaConfigsArgs<ExtArgs>
    _count?: boolean | RequestTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestType"]>

  export type RequestTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    schemaJson?: boolean
    defaultSlaMinutes?: boolean
  }, ExtArgs["result"]["requestType"]>

  export type RequestTypeSelectScalar = {
    id?: boolean
    name?: boolean
    schemaJson?: boolean
    defaultSlaMinutes?: boolean
  }

  export type RequestTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requests?: boolean | RequestType$requestsArgs<ExtArgs>
    slaConfigs?: boolean | RequestType$slaConfigsArgs<ExtArgs>
    _count?: boolean | RequestTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RequestTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RequestTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestType"
    objects: {
      requests: Prisma.$RequestPayload<ExtArgs>[]
      slaConfigs: Prisma.$SLAConfigPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      schemaJson: string
      defaultSlaMinutes: number
    }, ExtArgs["result"]["requestType"]>
    composites: {}
  }

  type RequestTypeGetPayload<S extends boolean | null | undefined | RequestTypeDefaultArgs> = $Result.GetResult<Prisma.$RequestTypePayload, S>

  type RequestTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestTypeCountAggregateInputType | true
    }

  export interface RequestTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestType'], meta: { name: 'RequestType' } }
    /**
     * Find zero or one RequestType that matches the filter.
     * @param {RequestTypeFindUniqueArgs} args - Arguments to find a RequestType
     * @example
     * // Get one RequestType
     * const requestType = await prisma.requestType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestTypeFindUniqueArgs>(args: SelectSubset<T, RequestTypeFindUniqueArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RequestType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestTypeFindUniqueOrThrowArgs} args - Arguments to find a RequestType
     * @example
     * // Get one RequestType
     * const requestType = await prisma.requestType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RequestType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeFindFirstArgs} args - Arguments to find a RequestType
     * @example
     * // Get one RequestType
     * const requestType = await prisma.requestType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestTypeFindFirstArgs>(args?: SelectSubset<T, RequestTypeFindFirstArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RequestType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeFindFirstOrThrowArgs} args - Arguments to find a RequestType
     * @example
     * // Get one RequestType
     * const requestType = await prisma.requestType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RequestTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestTypes
     * const requestTypes = await prisma.requestType.findMany()
     * 
     * // Get first 10 RequestTypes
     * const requestTypes = await prisma.requestType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestTypeWithIdOnly = await prisma.requestType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestTypeFindManyArgs>(args?: SelectSubset<T, RequestTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RequestType.
     * @param {RequestTypeCreateArgs} args - Arguments to create a RequestType.
     * @example
     * // Create one RequestType
     * const RequestType = await prisma.requestType.create({
     *   data: {
     *     // ... data to create a RequestType
     *   }
     * })
     * 
     */
    create<T extends RequestTypeCreateArgs>(args: SelectSubset<T, RequestTypeCreateArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RequestTypes.
     * @param {RequestTypeCreateManyArgs} args - Arguments to create many RequestTypes.
     * @example
     * // Create many RequestTypes
     * const requestType = await prisma.requestType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestTypeCreateManyArgs>(args?: SelectSubset<T, RequestTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestTypes and returns the data saved in the database.
     * @param {RequestTypeCreateManyAndReturnArgs} args - Arguments to create many RequestTypes.
     * @example
     * // Create many RequestTypes
     * const requestType = await prisma.requestType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestTypes and only return the `id`
     * const requestTypeWithIdOnly = await prisma.requestType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RequestType.
     * @param {RequestTypeDeleteArgs} args - Arguments to delete one RequestType.
     * @example
     * // Delete one RequestType
     * const RequestType = await prisma.requestType.delete({
     *   where: {
     *     // ... filter to delete one RequestType
     *   }
     * })
     * 
     */
    delete<T extends RequestTypeDeleteArgs>(args: SelectSubset<T, RequestTypeDeleteArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RequestType.
     * @param {RequestTypeUpdateArgs} args - Arguments to update one RequestType.
     * @example
     * // Update one RequestType
     * const requestType = await prisma.requestType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestTypeUpdateArgs>(args: SelectSubset<T, RequestTypeUpdateArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RequestTypes.
     * @param {RequestTypeDeleteManyArgs} args - Arguments to filter RequestTypes to delete.
     * @example
     * // Delete a few RequestTypes
     * const { count } = await prisma.requestType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestTypeDeleteManyArgs>(args?: SelectSubset<T, RequestTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestTypes
     * const requestType = await prisma.requestType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestTypeUpdateManyArgs>(args: SelectSubset<T, RequestTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RequestType.
     * @param {RequestTypeUpsertArgs} args - Arguments to update or create a RequestType.
     * @example
     * // Update or create a RequestType
     * const requestType = await prisma.requestType.upsert({
     *   create: {
     *     // ... data to create a RequestType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestType we want to update
     *   }
     * })
     */
    upsert<T extends RequestTypeUpsertArgs>(args: SelectSubset<T, RequestTypeUpsertArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RequestTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeCountArgs} args - Arguments to filter RequestTypes to count.
     * @example
     * // Count the number of RequestTypes
     * const count = await prisma.requestType.count({
     *   where: {
     *     // ... the filter for the RequestTypes we want to count
     *   }
     * })
    **/
    count<T extends RequestTypeCountArgs>(
      args?: Subset<T, RequestTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestTypeAggregateArgs>(args: Subset<T, RequestTypeAggregateArgs>): Prisma.PrismaPromise<GetRequestTypeAggregateType<T>>

    /**
     * Group by RequestType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestTypeGroupByArgs['orderBy'] }
        : { orderBy?: RequestTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestType model
   */
  readonly fields: RequestTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requests<T extends RequestType$requestsArgs<ExtArgs> = {}>(args?: Subset<T, RequestType$requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany"> | Null>
    slaConfigs<T extends RequestType$slaConfigsArgs<ExtArgs> = {}>(args?: Subset<T, RequestType$slaConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestType model
   */ 
  interface RequestTypeFieldRefs {
    readonly id: FieldRef<"RequestType", 'String'>
    readonly name: FieldRef<"RequestType", 'String'>
    readonly schemaJson: FieldRef<"RequestType", 'String'>
    readonly defaultSlaMinutes: FieldRef<"RequestType", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RequestType findUnique
   */
  export type RequestTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * Filter, which RequestType to fetch.
     */
    where: RequestTypeWhereUniqueInput
  }

  /**
   * RequestType findUniqueOrThrow
   */
  export type RequestTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * Filter, which RequestType to fetch.
     */
    where: RequestTypeWhereUniqueInput
  }

  /**
   * RequestType findFirst
   */
  export type RequestTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * Filter, which RequestType to fetch.
     */
    where?: RequestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTypes to fetch.
     */
    orderBy?: RequestTypeOrderByWithRelationInput | RequestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestTypes.
     */
    cursor?: RequestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestTypes.
     */
    distinct?: RequestTypeScalarFieldEnum | RequestTypeScalarFieldEnum[]
  }

  /**
   * RequestType findFirstOrThrow
   */
  export type RequestTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * Filter, which RequestType to fetch.
     */
    where?: RequestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTypes to fetch.
     */
    orderBy?: RequestTypeOrderByWithRelationInput | RequestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestTypes.
     */
    cursor?: RequestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestTypes.
     */
    distinct?: RequestTypeScalarFieldEnum | RequestTypeScalarFieldEnum[]
  }

  /**
   * RequestType findMany
   */
  export type RequestTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * Filter, which RequestTypes to fetch.
     */
    where?: RequestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestTypes to fetch.
     */
    orderBy?: RequestTypeOrderByWithRelationInput | RequestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestTypes.
     */
    cursor?: RequestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestTypes.
     */
    skip?: number
    distinct?: RequestTypeScalarFieldEnum | RequestTypeScalarFieldEnum[]
  }

  /**
   * RequestType create
   */
  export type RequestTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestType.
     */
    data: XOR<RequestTypeCreateInput, RequestTypeUncheckedCreateInput>
  }

  /**
   * RequestType createMany
   */
  export type RequestTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestTypes.
     */
    data: RequestTypeCreateManyInput | RequestTypeCreateManyInput[]
  }

  /**
   * RequestType createManyAndReturn
   */
  export type RequestTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RequestTypes.
     */
    data: RequestTypeCreateManyInput | RequestTypeCreateManyInput[]
  }

  /**
   * RequestType update
   */
  export type RequestTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestType.
     */
    data: XOR<RequestTypeUpdateInput, RequestTypeUncheckedUpdateInput>
    /**
     * Choose, which RequestType to update.
     */
    where: RequestTypeWhereUniqueInput
  }

  /**
   * RequestType updateMany
   */
  export type RequestTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestTypes.
     */
    data: XOR<RequestTypeUpdateManyMutationInput, RequestTypeUncheckedUpdateManyInput>
    /**
     * Filter which RequestTypes to update
     */
    where?: RequestTypeWhereInput
  }

  /**
   * RequestType upsert
   */
  export type RequestTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestType to update in case it exists.
     */
    where: RequestTypeWhereUniqueInput
    /**
     * In case the RequestType found by the `where` argument doesn't exist, create a new RequestType with this data.
     */
    create: XOR<RequestTypeCreateInput, RequestTypeUncheckedCreateInput>
    /**
     * In case the RequestType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestTypeUpdateInput, RequestTypeUncheckedUpdateInput>
  }

  /**
   * RequestType delete
   */
  export type RequestTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
    /**
     * Filter which RequestType to delete.
     */
    where: RequestTypeWhereUniqueInput
  }

  /**
   * RequestType deleteMany
   */
  export type RequestTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestTypes to delete
     */
    where?: RequestTypeWhereInput
  }

  /**
   * RequestType.requests
   */
  export type RequestType$requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    cursor?: RequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * RequestType.slaConfigs
   */
  export type RequestType$slaConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    where?: SLAConfigWhereInput
    orderBy?: SLAConfigOrderByWithRelationInput | SLAConfigOrderByWithRelationInput[]
    cursor?: SLAConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SLAConfigScalarFieldEnum | SLAConfigScalarFieldEnum[]
  }

  /**
   * RequestType without action
   */
  export type RequestTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestType
     */
    select?: RequestTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestTypeInclude<ExtArgs> | null
  }


  /**
   * Model Request
   */

  export type AggregateRequest = {
    _count: RequestCountAggregateOutputType | null
    _min: RequestMinAggregateOutputType | null
    _max: RequestMaxAggregateOutputType | null
  }

  export type RequestMinAggregateOutputType = {
    id: string | null
    typeId: string | null
    createdById: string | null
    assigneeId: string | null
    teamId: string | null
    title: string | null
    description: string | null
    priority: string | null
    currentStatus: string | null
    metadataJson: string | null
    dueAt: Date | null
    slaBreachAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestMaxAggregateOutputType = {
    id: string | null
    typeId: string | null
    createdById: string | null
    assigneeId: string | null
    teamId: string | null
    title: string | null
    description: string | null
    priority: string | null
    currentStatus: string | null
    metadataJson: string | null
    dueAt: Date | null
    slaBreachAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestCountAggregateOutputType = {
    id: number
    typeId: number
    createdById: number
    assigneeId: number
    teamId: number
    title: number
    description: number
    priority: number
    currentStatus: number
    metadataJson: number
    dueAt: number
    slaBreachAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequestMinAggregateInputType = {
    id?: true
    typeId?: true
    createdById?: true
    assigneeId?: true
    teamId?: true
    title?: true
    description?: true
    priority?: true
    currentStatus?: true
    metadataJson?: true
    dueAt?: true
    slaBreachAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestMaxAggregateInputType = {
    id?: true
    typeId?: true
    createdById?: true
    assigneeId?: true
    teamId?: true
    title?: true
    description?: true
    priority?: true
    currentStatus?: true
    metadataJson?: true
    dueAt?: true
    slaBreachAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestCountAggregateInputType = {
    id?: true
    typeId?: true
    createdById?: true
    assigneeId?: true
    teamId?: true
    title?: true
    description?: true
    priority?: true
    currentStatus?: true
    metadataJson?: true
    dueAt?: true
    slaBreachAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Request to aggregate.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Requests
    **/
    _count?: true | RequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestMaxAggregateInputType
  }

  export type GetRequestAggregateType<T extends RequestAggregateArgs> = {
        [P in keyof T & keyof AggregateRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequest[P]>
      : GetScalarType<T[P], AggregateRequest[P]>
  }




  export type RequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestWhereInput
    orderBy?: RequestOrderByWithAggregationInput | RequestOrderByWithAggregationInput[]
    by: RequestScalarFieldEnum[] | RequestScalarFieldEnum
    having?: RequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestCountAggregateInputType | true
    _min?: RequestMinAggregateInputType
    _max?: RequestMaxAggregateInputType
  }

  export type RequestGroupByOutputType = {
    id: string
    typeId: string
    createdById: string
    assigneeId: string | null
    teamId: string | null
    title: string
    description: string
    priority: string
    currentStatus: string
    metadataJson: string
    dueAt: Date | null
    slaBreachAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: RequestCountAggregateOutputType | null
    _min: RequestMinAggregateOutputType | null
    _max: RequestMaxAggregateOutputType | null
  }

  type GetRequestGroupByPayload<T extends RequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestGroupByOutputType[P]>
            : GetScalarType<T[P], RequestGroupByOutputType[P]>
        }
      >
    >


  export type RequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeId?: boolean
    createdById?: boolean
    assigneeId?: boolean
    teamId?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    currentStatus?: boolean
    metadataJson?: boolean
    dueAt?: boolean
    slaBreachAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Request$assigneeArgs<ExtArgs>
    team?: boolean | Request$teamArgs<ExtArgs>
    events?: boolean | Request$eventsArgs<ExtArgs>
    attachments?: boolean | Request$attachmentsArgs<ExtArgs>
    subscriptions?: boolean | Request$subscriptionsArgs<ExtArgs>
    _count?: boolean | RequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["request"]>

  export type RequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeId?: boolean
    createdById?: boolean
    assigneeId?: boolean
    teamId?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    currentStatus?: boolean
    metadataJson?: boolean
    dueAt?: boolean
    slaBreachAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Request$assigneeArgs<ExtArgs>
    team?: boolean | Request$teamArgs<ExtArgs>
  }, ExtArgs["result"]["request"]>

  export type RequestSelectScalar = {
    id?: boolean
    typeId?: boolean
    createdById?: boolean
    assigneeId?: boolean
    teamId?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    currentStatus?: boolean
    metadataJson?: boolean
    dueAt?: boolean
    slaBreachAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Request$assigneeArgs<ExtArgs>
    team?: boolean | Request$teamArgs<ExtArgs>
    events?: boolean | Request$eventsArgs<ExtArgs>
    attachments?: boolean | Request$attachmentsArgs<ExtArgs>
    subscriptions?: boolean | Request$subscriptionsArgs<ExtArgs>
    _count?: boolean | RequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Request$assigneeArgs<ExtArgs>
    team?: boolean | Request$teamArgs<ExtArgs>
  }

  export type $RequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Request"
    objects: {
      type: Prisma.$RequestTypePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      assignee: Prisma.$UserPayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs> | null
      events: Prisma.$RequestEventPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      typeId: string
      createdById: string
      assigneeId: string | null
      teamId: string | null
      title: string
      description: string
      priority: string
      currentStatus: string
      metadataJson: string
      dueAt: Date | null
      slaBreachAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["request"]>
    composites: {}
  }

  type RequestGetPayload<S extends boolean | null | undefined | RequestDefaultArgs> = $Result.GetResult<Prisma.$RequestPayload, S>

  type RequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestCountAggregateInputType | true
    }

  export interface RequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Request'], meta: { name: 'Request' } }
    /**
     * Find zero or one Request that matches the filter.
     * @param {RequestFindUniqueArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestFindUniqueArgs>(args: SelectSubset<T, RequestFindUniqueArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Request that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestFindUniqueOrThrowArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Request that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestFindFirstArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestFindFirstArgs>(args?: SelectSubset<T, RequestFindFirstArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Request that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestFindFirstOrThrowArgs} args - Arguments to find a Request
     * @example
     * // Get one Request
     * const request = await prisma.request.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Requests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Requests
     * const requests = await prisma.request.findMany()
     * 
     * // Get first 10 Requests
     * const requests = await prisma.request.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestWithIdOnly = await prisma.request.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestFindManyArgs>(args?: SelectSubset<T, RequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Request.
     * @param {RequestCreateArgs} args - Arguments to create a Request.
     * @example
     * // Create one Request
     * const Request = await prisma.request.create({
     *   data: {
     *     // ... data to create a Request
     *   }
     * })
     * 
     */
    create<T extends RequestCreateArgs>(args: SelectSubset<T, RequestCreateArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Requests.
     * @param {RequestCreateManyArgs} args - Arguments to create many Requests.
     * @example
     * // Create many Requests
     * const request = await prisma.request.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestCreateManyArgs>(args?: SelectSubset<T, RequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Requests and returns the data saved in the database.
     * @param {RequestCreateManyAndReturnArgs} args - Arguments to create many Requests.
     * @example
     * // Create many Requests
     * const request = await prisma.request.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Requests and only return the `id`
     * const requestWithIdOnly = await prisma.request.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Request.
     * @param {RequestDeleteArgs} args - Arguments to delete one Request.
     * @example
     * // Delete one Request
     * const Request = await prisma.request.delete({
     *   where: {
     *     // ... filter to delete one Request
     *   }
     * })
     * 
     */
    delete<T extends RequestDeleteArgs>(args: SelectSubset<T, RequestDeleteArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Request.
     * @param {RequestUpdateArgs} args - Arguments to update one Request.
     * @example
     * // Update one Request
     * const request = await prisma.request.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestUpdateArgs>(args: SelectSubset<T, RequestUpdateArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Requests.
     * @param {RequestDeleteManyArgs} args - Arguments to filter Requests to delete.
     * @example
     * // Delete a few Requests
     * const { count } = await prisma.request.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestDeleteManyArgs>(args?: SelectSubset<T, RequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Requests
     * const request = await prisma.request.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestUpdateManyArgs>(args: SelectSubset<T, RequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Request.
     * @param {RequestUpsertArgs} args - Arguments to update or create a Request.
     * @example
     * // Update or create a Request
     * const request = await prisma.request.upsert({
     *   create: {
     *     // ... data to create a Request
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Request we want to update
     *   }
     * })
     */
    upsert<T extends RequestUpsertArgs>(args: SelectSubset<T, RequestUpsertArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestCountArgs} args - Arguments to filter Requests to count.
     * @example
     * // Count the number of Requests
     * const count = await prisma.request.count({
     *   where: {
     *     // ... the filter for the Requests we want to count
     *   }
     * })
    **/
    count<T extends RequestCountArgs>(
      args?: Subset<T, RequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestAggregateArgs>(args: Subset<T, RequestAggregateArgs>): Prisma.PrismaPromise<GetRequestAggregateType<T>>

    /**
     * Group by Request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestGroupByArgs['orderBy'] }
        : { orderBy?: RequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Request model
   */
  readonly fields: RequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Request.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    type<T extends RequestTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestTypeDefaultArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignee<T extends Request$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Request$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    team<T extends Request$teamArgs<ExtArgs> = {}>(args?: Subset<T, Request$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    events<T extends Request$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Request$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findMany"> | Null>
    attachments<T extends Request$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Request$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    subscriptions<T extends Request$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Request$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Request model
   */ 
  interface RequestFieldRefs {
    readonly id: FieldRef<"Request", 'String'>
    readonly typeId: FieldRef<"Request", 'String'>
    readonly createdById: FieldRef<"Request", 'String'>
    readonly assigneeId: FieldRef<"Request", 'String'>
    readonly teamId: FieldRef<"Request", 'String'>
    readonly title: FieldRef<"Request", 'String'>
    readonly description: FieldRef<"Request", 'String'>
    readonly priority: FieldRef<"Request", 'String'>
    readonly currentStatus: FieldRef<"Request", 'String'>
    readonly metadataJson: FieldRef<"Request", 'String'>
    readonly dueAt: FieldRef<"Request", 'DateTime'>
    readonly slaBreachAt: FieldRef<"Request", 'DateTime'>
    readonly createdAt: FieldRef<"Request", 'DateTime'>
    readonly updatedAt: FieldRef<"Request", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Request findUnique
   */
  export type RequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request findUniqueOrThrow
   */
  export type RequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request findFirst
   */
  export type RequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Requests.
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Requests.
     */
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Request findFirstOrThrow
   */
  export type RequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Request to fetch.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Requests.
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Requests.
     */
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Request findMany
   */
  export type RequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter, which Requests to fetch.
     */
    where?: RequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Requests to fetch.
     */
    orderBy?: RequestOrderByWithRelationInput | RequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Requests.
     */
    cursor?: RequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Requests.
     */
    skip?: number
    distinct?: RequestScalarFieldEnum | RequestScalarFieldEnum[]
  }

  /**
   * Request create
   */
  export type RequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * The data needed to create a Request.
     */
    data: XOR<RequestCreateInput, RequestUncheckedCreateInput>
  }

  /**
   * Request createMany
   */
  export type RequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Requests.
     */
    data: RequestCreateManyInput | RequestCreateManyInput[]
  }

  /**
   * Request createManyAndReturn
   */
  export type RequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Requests.
     */
    data: RequestCreateManyInput | RequestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Request update
   */
  export type RequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * The data needed to update a Request.
     */
    data: XOR<RequestUpdateInput, RequestUncheckedUpdateInput>
    /**
     * Choose, which Request to update.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request updateMany
   */
  export type RequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Requests.
     */
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyInput>
    /**
     * Filter which Requests to update
     */
    where?: RequestWhereInput
  }

  /**
   * Request upsert
   */
  export type RequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * The filter to search for the Request to update in case it exists.
     */
    where: RequestWhereUniqueInput
    /**
     * In case the Request found by the `where` argument doesn't exist, create a new Request with this data.
     */
    create: XOR<RequestCreateInput, RequestUncheckedCreateInput>
    /**
     * In case the Request was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestUpdateInput, RequestUncheckedUpdateInput>
  }

  /**
   * Request delete
   */
  export type RequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
    /**
     * Filter which Request to delete.
     */
    where: RequestWhereUniqueInput
  }

  /**
   * Request deleteMany
   */
  export type RequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Requests to delete
     */
    where?: RequestWhereInput
  }

  /**
   * Request.assignee
   */
  export type Request$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Request.team
   */
  export type Request$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Request.events
   */
  export type Request$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    where?: RequestEventWhereInput
    orderBy?: RequestEventOrderByWithRelationInput | RequestEventOrderByWithRelationInput[]
    cursor?: RequestEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestEventScalarFieldEnum | RequestEventScalarFieldEnum[]
  }

  /**
   * Request.attachments
   */
  export type Request$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Request.subscriptions
   */
  export type Request$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Request without action
   */
  export type RequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Request
     */
    select?: RequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestInclude<ExtArgs> | null
  }


  /**
   * Model RequestEvent
   */

  export type AggregateRequestEvent = {
    _count: RequestEventCountAggregateOutputType | null
    _min: RequestEventMinAggregateOutputType | null
    _max: RequestEventMaxAggregateOutputType | null
  }

  export type RequestEventMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    actorId: string | null
    eventType: string | null
    payloadJson: string | null
    createdAt: Date | null
  }

  export type RequestEventMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    actorId: string | null
    eventType: string | null
    payloadJson: string | null
    createdAt: Date | null
  }

  export type RequestEventCountAggregateOutputType = {
    id: number
    requestId: number
    actorId: number
    eventType: number
    payloadJson: number
    createdAt: number
    _all: number
  }


  export type RequestEventMinAggregateInputType = {
    id?: true
    requestId?: true
    actorId?: true
    eventType?: true
    payloadJson?: true
    createdAt?: true
  }

  export type RequestEventMaxAggregateInputType = {
    id?: true
    requestId?: true
    actorId?: true
    eventType?: true
    payloadJson?: true
    createdAt?: true
  }

  export type RequestEventCountAggregateInputType = {
    id?: true
    requestId?: true
    actorId?: true
    eventType?: true
    payloadJson?: true
    createdAt?: true
    _all?: true
  }

  export type RequestEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestEvent to aggregate.
     */
    where?: RequestEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestEvents to fetch.
     */
    orderBy?: RequestEventOrderByWithRelationInput | RequestEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestEvents
    **/
    _count?: true | RequestEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestEventMaxAggregateInputType
  }

  export type GetRequestEventAggregateType<T extends RequestEventAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestEvent[P]>
      : GetScalarType<T[P], AggregateRequestEvent[P]>
  }




  export type RequestEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestEventWhereInput
    orderBy?: RequestEventOrderByWithAggregationInput | RequestEventOrderByWithAggregationInput[]
    by: RequestEventScalarFieldEnum[] | RequestEventScalarFieldEnum
    having?: RequestEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestEventCountAggregateInputType | true
    _min?: RequestEventMinAggregateInputType
    _max?: RequestEventMaxAggregateInputType
  }

  export type RequestEventGroupByOutputType = {
    id: string
    requestId: string
    actorId: string
    eventType: string
    payloadJson: string
    createdAt: Date
    _count: RequestEventCountAggregateOutputType | null
    _min: RequestEventMinAggregateOutputType | null
    _max: RequestEventMaxAggregateOutputType | null
  }

  type GetRequestEventGroupByPayload<T extends RequestEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestEventGroupByOutputType[P]>
            : GetScalarType<T[P], RequestEventGroupByOutputType[P]>
        }
      >
    >


  export type RequestEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    actorId?: boolean
    eventType?: boolean
    payloadJson?: boolean
    createdAt?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestEvent"]>

  export type RequestEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    actorId?: boolean
    eventType?: boolean
    payloadJson?: boolean
    createdAt?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestEvent"]>

  export type RequestEventSelectScalar = {
    id?: boolean
    requestId?: boolean
    actorId?: boolean
    eventType?: boolean
    payloadJson?: boolean
    createdAt?: boolean
  }

  export type RequestEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RequestEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RequestEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestEvent"
    objects: {
      request: Prisma.$RequestPayload<ExtArgs>
      actor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      actorId: string
      eventType: string
      payloadJson: string
      createdAt: Date
    }, ExtArgs["result"]["requestEvent"]>
    composites: {}
  }

  type RequestEventGetPayload<S extends boolean | null | undefined | RequestEventDefaultArgs> = $Result.GetResult<Prisma.$RequestEventPayload, S>

  type RequestEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestEventCountAggregateInputType | true
    }

  export interface RequestEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestEvent'], meta: { name: 'RequestEvent' } }
    /**
     * Find zero or one RequestEvent that matches the filter.
     * @param {RequestEventFindUniqueArgs} args - Arguments to find a RequestEvent
     * @example
     * // Get one RequestEvent
     * const requestEvent = await prisma.requestEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestEventFindUniqueArgs>(args: SelectSubset<T, RequestEventFindUniqueArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RequestEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestEventFindUniqueOrThrowArgs} args - Arguments to find a RequestEvent
     * @example
     * // Get one RequestEvent
     * const requestEvent = await prisma.requestEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestEventFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RequestEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventFindFirstArgs} args - Arguments to find a RequestEvent
     * @example
     * // Get one RequestEvent
     * const requestEvent = await prisma.requestEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestEventFindFirstArgs>(args?: SelectSubset<T, RequestEventFindFirstArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RequestEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventFindFirstOrThrowArgs} args - Arguments to find a RequestEvent
     * @example
     * // Get one RequestEvent
     * const requestEvent = await prisma.requestEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestEventFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RequestEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestEvents
     * const requestEvents = await prisma.requestEvent.findMany()
     * 
     * // Get first 10 RequestEvents
     * const requestEvents = await prisma.requestEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestEventWithIdOnly = await prisma.requestEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestEventFindManyArgs>(args?: SelectSubset<T, RequestEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RequestEvent.
     * @param {RequestEventCreateArgs} args - Arguments to create a RequestEvent.
     * @example
     * // Create one RequestEvent
     * const RequestEvent = await prisma.requestEvent.create({
     *   data: {
     *     // ... data to create a RequestEvent
     *   }
     * })
     * 
     */
    create<T extends RequestEventCreateArgs>(args: SelectSubset<T, RequestEventCreateArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RequestEvents.
     * @param {RequestEventCreateManyArgs} args - Arguments to create many RequestEvents.
     * @example
     * // Create many RequestEvents
     * const requestEvent = await prisma.requestEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestEventCreateManyArgs>(args?: SelectSubset<T, RequestEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestEvents and returns the data saved in the database.
     * @param {RequestEventCreateManyAndReturnArgs} args - Arguments to create many RequestEvents.
     * @example
     * // Create many RequestEvents
     * const requestEvent = await prisma.requestEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestEvents and only return the `id`
     * const requestEventWithIdOnly = await prisma.requestEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestEventCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RequestEvent.
     * @param {RequestEventDeleteArgs} args - Arguments to delete one RequestEvent.
     * @example
     * // Delete one RequestEvent
     * const RequestEvent = await prisma.requestEvent.delete({
     *   where: {
     *     // ... filter to delete one RequestEvent
     *   }
     * })
     * 
     */
    delete<T extends RequestEventDeleteArgs>(args: SelectSubset<T, RequestEventDeleteArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RequestEvent.
     * @param {RequestEventUpdateArgs} args - Arguments to update one RequestEvent.
     * @example
     * // Update one RequestEvent
     * const requestEvent = await prisma.requestEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestEventUpdateArgs>(args: SelectSubset<T, RequestEventUpdateArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RequestEvents.
     * @param {RequestEventDeleteManyArgs} args - Arguments to filter RequestEvents to delete.
     * @example
     * // Delete a few RequestEvents
     * const { count } = await prisma.requestEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestEventDeleteManyArgs>(args?: SelectSubset<T, RequestEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestEvents
     * const requestEvent = await prisma.requestEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestEventUpdateManyArgs>(args: SelectSubset<T, RequestEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RequestEvent.
     * @param {RequestEventUpsertArgs} args - Arguments to update or create a RequestEvent.
     * @example
     * // Update or create a RequestEvent
     * const requestEvent = await prisma.requestEvent.upsert({
     *   create: {
     *     // ... data to create a RequestEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestEvent we want to update
     *   }
     * })
     */
    upsert<T extends RequestEventUpsertArgs>(args: SelectSubset<T, RequestEventUpsertArgs<ExtArgs>>): Prisma__RequestEventClient<$Result.GetResult<Prisma.$RequestEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RequestEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventCountArgs} args - Arguments to filter RequestEvents to count.
     * @example
     * // Count the number of RequestEvents
     * const count = await prisma.requestEvent.count({
     *   where: {
     *     // ... the filter for the RequestEvents we want to count
     *   }
     * })
    **/
    count<T extends RequestEventCountArgs>(
      args?: Subset<T, RequestEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestEventAggregateArgs>(args: Subset<T, RequestEventAggregateArgs>): Prisma.PrismaPromise<GetRequestEventAggregateType<T>>

    /**
     * Group by RequestEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestEventGroupByArgs['orderBy'] }
        : { orderBy?: RequestEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestEvent model
   */
  readonly fields: RequestEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends RequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestDefaultArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    actor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestEvent model
   */ 
  interface RequestEventFieldRefs {
    readonly id: FieldRef<"RequestEvent", 'String'>
    readonly requestId: FieldRef<"RequestEvent", 'String'>
    readonly actorId: FieldRef<"RequestEvent", 'String'>
    readonly eventType: FieldRef<"RequestEvent", 'String'>
    readonly payloadJson: FieldRef<"RequestEvent", 'String'>
    readonly createdAt: FieldRef<"RequestEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestEvent findUnique
   */
  export type RequestEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * Filter, which RequestEvent to fetch.
     */
    where: RequestEventWhereUniqueInput
  }

  /**
   * RequestEvent findUniqueOrThrow
   */
  export type RequestEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * Filter, which RequestEvent to fetch.
     */
    where: RequestEventWhereUniqueInput
  }

  /**
   * RequestEvent findFirst
   */
  export type RequestEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * Filter, which RequestEvent to fetch.
     */
    where?: RequestEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestEvents to fetch.
     */
    orderBy?: RequestEventOrderByWithRelationInput | RequestEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestEvents.
     */
    cursor?: RequestEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestEvents.
     */
    distinct?: RequestEventScalarFieldEnum | RequestEventScalarFieldEnum[]
  }

  /**
   * RequestEvent findFirstOrThrow
   */
  export type RequestEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * Filter, which RequestEvent to fetch.
     */
    where?: RequestEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestEvents to fetch.
     */
    orderBy?: RequestEventOrderByWithRelationInput | RequestEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestEvents.
     */
    cursor?: RequestEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestEvents.
     */
    distinct?: RequestEventScalarFieldEnum | RequestEventScalarFieldEnum[]
  }

  /**
   * RequestEvent findMany
   */
  export type RequestEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * Filter, which RequestEvents to fetch.
     */
    where?: RequestEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestEvents to fetch.
     */
    orderBy?: RequestEventOrderByWithRelationInput | RequestEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestEvents.
     */
    cursor?: RequestEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestEvents.
     */
    skip?: number
    distinct?: RequestEventScalarFieldEnum | RequestEventScalarFieldEnum[]
  }

  /**
   * RequestEvent create
   */
  export type RequestEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestEvent.
     */
    data: XOR<RequestEventCreateInput, RequestEventUncheckedCreateInput>
  }

  /**
   * RequestEvent createMany
   */
  export type RequestEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestEvents.
     */
    data: RequestEventCreateManyInput | RequestEventCreateManyInput[]
  }

  /**
   * RequestEvent createManyAndReturn
   */
  export type RequestEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RequestEvents.
     */
    data: RequestEventCreateManyInput | RequestEventCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestEvent update
   */
  export type RequestEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestEvent.
     */
    data: XOR<RequestEventUpdateInput, RequestEventUncheckedUpdateInput>
    /**
     * Choose, which RequestEvent to update.
     */
    where: RequestEventWhereUniqueInput
  }

  /**
   * RequestEvent updateMany
   */
  export type RequestEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestEvents.
     */
    data: XOR<RequestEventUpdateManyMutationInput, RequestEventUncheckedUpdateManyInput>
    /**
     * Filter which RequestEvents to update
     */
    where?: RequestEventWhereInput
  }

  /**
   * RequestEvent upsert
   */
  export type RequestEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestEvent to update in case it exists.
     */
    where: RequestEventWhereUniqueInput
    /**
     * In case the RequestEvent found by the `where` argument doesn't exist, create a new RequestEvent with this data.
     */
    create: XOR<RequestEventCreateInput, RequestEventUncheckedCreateInput>
    /**
     * In case the RequestEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestEventUpdateInput, RequestEventUncheckedUpdateInput>
  }

  /**
   * RequestEvent delete
   */
  export type RequestEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
    /**
     * Filter which RequestEvent to delete.
     */
    where: RequestEventWhereUniqueInput
  }

  /**
   * RequestEvent deleteMany
   */
  export type RequestEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestEvents to delete
     */
    where?: RequestEventWhereInput
  }

  /**
   * RequestEvent without action
   */
  export type RequestEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestEvent
     */
    select?: RequestEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestEventInclude<ExtArgs> | null
  }


  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentAvgAggregateOutputType = {
    size: number | null
  }

  export type AttachmentSumAggregateOutputType = {
    size: number | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    uploadedById: string | null
    url: string | null
    name: string | null
    size: number | null
    mime: string | null
    createdAt: Date | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    uploadedById: string | null
    url: string | null
    name: string | null
    size: number | null
    mime: string | null
    createdAt: Date | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    requestId: number
    uploadedById: number
    url: number
    name: number
    size: number
    mime: number
    createdAt: number
    _all: number
  }


  export type AttachmentAvgAggregateInputType = {
    size?: true
  }

  export type AttachmentSumAggregateInputType = {
    size?: true
  }

  export type AttachmentMinAggregateInputType = {
    id?: true
    requestId?: true
    uploadedById?: true
    url?: true
    name?: true
    size?: true
    mime?: true
    createdAt?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    requestId?: true
    uploadedById?: true
    url?: true
    name?: true
    size?: true
    mime?: true
    createdAt?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    requestId?: true
    uploadedById?: true
    url?: true
    name?: true
    size?: true
    mime?: true
    createdAt?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _avg?: AttachmentAvgAggregateInputType
    _sum?: AttachmentSumAggregateInputType
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: string
    requestId: string
    uploadedById: string
    url: string
    name: string
    size: number
    mime: string
    createdAt: Date
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    uploadedById?: boolean
    url?: boolean
    name?: boolean
    size?: boolean
    mime?: boolean
    createdAt?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    uploadedById?: boolean
    url?: boolean
    name?: boolean
    size?: boolean
    mime?: boolean
    createdAt?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectScalar = {
    id?: boolean
    requestId?: boolean
    uploadedById?: boolean
    url?: boolean
    name?: boolean
    size?: boolean
    mime?: boolean
    createdAt?: boolean
  }

  export type AttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {
      request: Prisma.$RequestPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      uploadedById: string
      url: string
      name: string
      size: number
      mime: string
      createdAt: Date
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attachments and returns the data saved in the database.
     * @param {AttachmentCreateManyAndReturnArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends RequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestDefaultArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */ 
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'String'>
    readonly requestId: FieldRef<"Attachment", 'String'>
    readonly uploadedById: FieldRef<"Attachment", 'String'>
    readonly url: FieldRef<"Attachment", 'String'>
    readonly name: FieldRef<"Attachment", 'String'>
    readonly size: FieldRef<"Attachment", 'Int'>
    readonly mime: FieldRef<"Attachment", 'String'>
    readonly createdAt: FieldRef<"Attachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
  }

  /**
   * Attachment createManyAndReturn
   */
  export type AttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
  }


  /**
   * Model SLAConfig
   */

  export type AggregateSLAConfig = {
    _count: SLAConfigCountAggregateOutputType | null
    _avg: SLAConfigAvgAggregateOutputType | null
    _sum: SLAConfigSumAggregateOutputType | null
    _min: SLAConfigMinAggregateOutputType | null
    _max: SLAConfigMaxAggregateOutputType | null
  }

  export type SLAConfigAvgAggregateOutputType = {
    targetMinutes: number | null
  }

  export type SLAConfigSumAggregateOutputType = {
    targetMinutes: number | null
  }

  export type SLAConfigMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    typeId: string | null
    priority: string | null
    targetMinutes: number | null
  }

  export type SLAConfigMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    typeId: string | null
    priority: string | null
    targetMinutes: number | null
  }

  export type SLAConfigCountAggregateOutputType = {
    id: number
    teamId: number
    typeId: number
    priority: number
    targetMinutes: number
    _all: number
  }


  export type SLAConfigAvgAggregateInputType = {
    targetMinutes?: true
  }

  export type SLAConfigSumAggregateInputType = {
    targetMinutes?: true
  }

  export type SLAConfigMinAggregateInputType = {
    id?: true
    teamId?: true
    typeId?: true
    priority?: true
    targetMinutes?: true
  }

  export type SLAConfigMaxAggregateInputType = {
    id?: true
    teamId?: true
    typeId?: true
    priority?: true
    targetMinutes?: true
  }

  export type SLAConfigCountAggregateInputType = {
    id?: true
    teamId?: true
    typeId?: true
    priority?: true
    targetMinutes?: true
    _all?: true
  }

  export type SLAConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SLAConfig to aggregate.
     */
    where?: SLAConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SLAConfigs to fetch.
     */
    orderBy?: SLAConfigOrderByWithRelationInput | SLAConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SLAConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SLAConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SLAConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SLAConfigs
    **/
    _count?: true | SLAConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SLAConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SLAConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SLAConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SLAConfigMaxAggregateInputType
  }

  export type GetSLAConfigAggregateType<T extends SLAConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSLAConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSLAConfig[P]>
      : GetScalarType<T[P], AggregateSLAConfig[P]>
  }




  export type SLAConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SLAConfigWhereInput
    orderBy?: SLAConfigOrderByWithAggregationInput | SLAConfigOrderByWithAggregationInput[]
    by: SLAConfigScalarFieldEnum[] | SLAConfigScalarFieldEnum
    having?: SLAConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SLAConfigCountAggregateInputType | true
    _avg?: SLAConfigAvgAggregateInputType
    _sum?: SLAConfigSumAggregateInputType
    _min?: SLAConfigMinAggregateInputType
    _max?: SLAConfigMaxAggregateInputType
  }

  export type SLAConfigGroupByOutputType = {
    id: string
    teamId: string
    typeId: string
    priority: string
    targetMinutes: number
    _count: SLAConfigCountAggregateOutputType | null
    _avg: SLAConfigAvgAggregateOutputType | null
    _sum: SLAConfigSumAggregateOutputType | null
    _min: SLAConfigMinAggregateOutputType | null
    _max: SLAConfigMaxAggregateOutputType | null
  }

  type GetSLAConfigGroupByPayload<T extends SLAConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SLAConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SLAConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SLAConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SLAConfigGroupByOutputType[P]>
        }
      >
    >


  export type SLAConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    typeId?: boolean
    priority?: boolean
    targetMinutes?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sLAConfig"]>

  export type SLAConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    typeId?: boolean
    priority?: boolean
    targetMinutes?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sLAConfig"]>

  export type SLAConfigSelectScalar = {
    id?: boolean
    teamId?: boolean
    typeId?: boolean
    priority?: boolean
    targetMinutes?: boolean
  }

  export type SLAConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
  }
  export type SLAConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | RequestTypeDefaultArgs<ExtArgs>
  }

  export type $SLAConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SLAConfig"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      type: Prisma.$RequestTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      typeId: string
      priority: string
      targetMinutes: number
    }, ExtArgs["result"]["sLAConfig"]>
    composites: {}
  }

  type SLAConfigGetPayload<S extends boolean | null | undefined | SLAConfigDefaultArgs> = $Result.GetResult<Prisma.$SLAConfigPayload, S>

  type SLAConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SLAConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SLAConfigCountAggregateInputType | true
    }

  export interface SLAConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SLAConfig'], meta: { name: 'SLAConfig' } }
    /**
     * Find zero or one SLAConfig that matches the filter.
     * @param {SLAConfigFindUniqueArgs} args - Arguments to find a SLAConfig
     * @example
     * // Get one SLAConfig
     * const sLAConfig = await prisma.sLAConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SLAConfigFindUniqueArgs>(args: SelectSubset<T, SLAConfigFindUniqueArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SLAConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SLAConfigFindUniqueOrThrowArgs} args - Arguments to find a SLAConfig
     * @example
     * // Get one SLAConfig
     * const sLAConfig = await prisma.sLAConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SLAConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SLAConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SLAConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigFindFirstArgs} args - Arguments to find a SLAConfig
     * @example
     * // Get one SLAConfig
     * const sLAConfig = await prisma.sLAConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SLAConfigFindFirstArgs>(args?: SelectSubset<T, SLAConfigFindFirstArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SLAConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigFindFirstOrThrowArgs} args - Arguments to find a SLAConfig
     * @example
     * // Get one SLAConfig
     * const sLAConfig = await prisma.sLAConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SLAConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SLAConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SLAConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SLAConfigs
     * const sLAConfigs = await prisma.sLAConfig.findMany()
     * 
     * // Get first 10 SLAConfigs
     * const sLAConfigs = await prisma.sLAConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sLAConfigWithIdOnly = await prisma.sLAConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SLAConfigFindManyArgs>(args?: SelectSubset<T, SLAConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SLAConfig.
     * @param {SLAConfigCreateArgs} args - Arguments to create a SLAConfig.
     * @example
     * // Create one SLAConfig
     * const SLAConfig = await prisma.sLAConfig.create({
     *   data: {
     *     // ... data to create a SLAConfig
     *   }
     * })
     * 
     */
    create<T extends SLAConfigCreateArgs>(args: SelectSubset<T, SLAConfigCreateArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SLAConfigs.
     * @param {SLAConfigCreateManyArgs} args - Arguments to create many SLAConfigs.
     * @example
     * // Create many SLAConfigs
     * const sLAConfig = await prisma.sLAConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SLAConfigCreateManyArgs>(args?: SelectSubset<T, SLAConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SLAConfigs and returns the data saved in the database.
     * @param {SLAConfigCreateManyAndReturnArgs} args - Arguments to create many SLAConfigs.
     * @example
     * // Create many SLAConfigs
     * const sLAConfig = await prisma.sLAConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SLAConfigs and only return the `id`
     * const sLAConfigWithIdOnly = await prisma.sLAConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SLAConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SLAConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SLAConfig.
     * @param {SLAConfigDeleteArgs} args - Arguments to delete one SLAConfig.
     * @example
     * // Delete one SLAConfig
     * const SLAConfig = await prisma.sLAConfig.delete({
     *   where: {
     *     // ... filter to delete one SLAConfig
     *   }
     * })
     * 
     */
    delete<T extends SLAConfigDeleteArgs>(args: SelectSubset<T, SLAConfigDeleteArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SLAConfig.
     * @param {SLAConfigUpdateArgs} args - Arguments to update one SLAConfig.
     * @example
     * // Update one SLAConfig
     * const sLAConfig = await prisma.sLAConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SLAConfigUpdateArgs>(args: SelectSubset<T, SLAConfigUpdateArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SLAConfigs.
     * @param {SLAConfigDeleteManyArgs} args - Arguments to filter SLAConfigs to delete.
     * @example
     * // Delete a few SLAConfigs
     * const { count } = await prisma.sLAConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SLAConfigDeleteManyArgs>(args?: SelectSubset<T, SLAConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SLAConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SLAConfigs
     * const sLAConfig = await prisma.sLAConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SLAConfigUpdateManyArgs>(args: SelectSubset<T, SLAConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SLAConfig.
     * @param {SLAConfigUpsertArgs} args - Arguments to update or create a SLAConfig.
     * @example
     * // Update or create a SLAConfig
     * const sLAConfig = await prisma.sLAConfig.upsert({
     *   create: {
     *     // ... data to create a SLAConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SLAConfig we want to update
     *   }
     * })
     */
    upsert<T extends SLAConfigUpsertArgs>(args: SelectSubset<T, SLAConfigUpsertArgs<ExtArgs>>): Prisma__SLAConfigClient<$Result.GetResult<Prisma.$SLAConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SLAConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigCountArgs} args - Arguments to filter SLAConfigs to count.
     * @example
     * // Count the number of SLAConfigs
     * const count = await prisma.sLAConfig.count({
     *   where: {
     *     // ... the filter for the SLAConfigs we want to count
     *   }
     * })
    **/
    count<T extends SLAConfigCountArgs>(
      args?: Subset<T, SLAConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SLAConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SLAConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SLAConfigAggregateArgs>(args: Subset<T, SLAConfigAggregateArgs>): Prisma.PrismaPromise<GetSLAConfigAggregateType<T>>

    /**
     * Group by SLAConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SLAConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SLAConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SLAConfigGroupByArgs['orderBy'] }
        : { orderBy?: SLAConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SLAConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSLAConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SLAConfig model
   */
  readonly fields: SLAConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SLAConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SLAConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    type<T extends RequestTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestTypeDefaultArgs<ExtArgs>>): Prisma__RequestTypeClient<$Result.GetResult<Prisma.$RequestTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SLAConfig model
   */ 
  interface SLAConfigFieldRefs {
    readonly id: FieldRef<"SLAConfig", 'String'>
    readonly teamId: FieldRef<"SLAConfig", 'String'>
    readonly typeId: FieldRef<"SLAConfig", 'String'>
    readonly priority: FieldRef<"SLAConfig", 'String'>
    readonly targetMinutes: FieldRef<"SLAConfig", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SLAConfig findUnique
   */
  export type SLAConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * Filter, which SLAConfig to fetch.
     */
    where: SLAConfigWhereUniqueInput
  }

  /**
   * SLAConfig findUniqueOrThrow
   */
  export type SLAConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * Filter, which SLAConfig to fetch.
     */
    where: SLAConfigWhereUniqueInput
  }

  /**
   * SLAConfig findFirst
   */
  export type SLAConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * Filter, which SLAConfig to fetch.
     */
    where?: SLAConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SLAConfigs to fetch.
     */
    orderBy?: SLAConfigOrderByWithRelationInput | SLAConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SLAConfigs.
     */
    cursor?: SLAConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SLAConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SLAConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SLAConfigs.
     */
    distinct?: SLAConfigScalarFieldEnum | SLAConfigScalarFieldEnum[]
  }

  /**
   * SLAConfig findFirstOrThrow
   */
  export type SLAConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * Filter, which SLAConfig to fetch.
     */
    where?: SLAConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SLAConfigs to fetch.
     */
    orderBy?: SLAConfigOrderByWithRelationInput | SLAConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SLAConfigs.
     */
    cursor?: SLAConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SLAConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SLAConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SLAConfigs.
     */
    distinct?: SLAConfigScalarFieldEnum | SLAConfigScalarFieldEnum[]
  }

  /**
   * SLAConfig findMany
   */
  export type SLAConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * Filter, which SLAConfigs to fetch.
     */
    where?: SLAConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SLAConfigs to fetch.
     */
    orderBy?: SLAConfigOrderByWithRelationInput | SLAConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SLAConfigs.
     */
    cursor?: SLAConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SLAConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SLAConfigs.
     */
    skip?: number
    distinct?: SLAConfigScalarFieldEnum | SLAConfigScalarFieldEnum[]
  }

  /**
   * SLAConfig create
   */
  export type SLAConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a SLAConfig.
     */
    data: XOR<SLAConfigCreateInput, SLAConfigUncheckedCreateInput>
  }

  /**
   * SLAConfig createMany
   */
  export type SLAConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SLAConfigs.
     */
    data: SLAConfigCreateManyInput | SLAConfigCreateManyInput[]
  }

  /**
   * SLAConfig createManyAndReturn
   */
  export type SLAConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SLAConfigs.
     */
    data: SLAConfigCreateManyInput | SLAConfigCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SLAConfig update
   */
  export type SLAConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a SLAConfig.
     */
    data: XOR<SLAConfigUpdateInput, SLAConfigUncheckedUpdateInput>
    /**
     * Choose, which SLAConfig to update.
     */
    where: SLAConfigWhereUniqueInput
  }

  /**
   * SLAConfig updateMany
   */
  export type SLAConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SLAConfigs.
     */
    data: XOR<SLAConfigUpdateManyMutationInput, SLAConfigUncheckedUpdateManyInput>
    /**
     * Filter which SLAConfigs to update
     */
    where?: SLAConfigWhereInput
  }

  /**
   * SLAConfig upsert
   */
  export type SLAConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the SLAConfig to update in case it exists.
     */
    where: SLAConfigWhereUniqueInput
    /**
     * In case the SLAConfig found by the `where` argument doesn't exist, create a new SLAConfig with this data.
     */
    create: XOR<SLAConfigCreateInput, SLAConfigUncheckedCreateInput>
    /**
     * In case the SLAConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SLAConfigUpdateInput, SLAConfigUncheckedUpdateInput>
  }

  /**
   * SLAConfig delete
   */
  export type SLAConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
    /**
     * Filter which SLAConfig to delete.
     */
    where: SLAConfigWhereUniqueInput
  }

  /**
   * SLAConfig deleteMany
   */
  export type SLAConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SLAConfigs to delete
     */
    where?: SLAConfigWhereInput
  }

  /**
   * SLAConfig without action
   */
  export type SLAConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SLAConfig
     */
    select?: SLAConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SLAConfigInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    tz: string | null
    workdaysJson: string | null
    holidaysJson: string | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    tz: string | null
    workdaysJson: string | null
    holidaysJson: string | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    teamId: number
    tz: number
    workdaysJson: number
    holidaysJson: number
    _all: number
  }


  export type ScheduleMinAggregateInputType = {
    id?: true
    teamId?: true
    tz?: true
    workdaysJson?: true
    holidaysJson?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    teamId?: true
    tz?: true
    workdaysJson?: true
    holidaysJson?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    teamId?: true
    tz?: true
    workdaysJson?: true
    holidaysJson?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: string
    teamId: string
    tz: string
    workdaysJson: string
    holidaysJson: string
    _count: ScheduleCountAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    tz?: boolean
    workdaysJson?: boolean
    holidaysJson?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    tz?: boolean
    workdaysJson?: boolean
    holidaysJson?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    teamId?: boolean
    tz?: boolean
    workdaysJson?: boolean
    holidaysJson?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      tz: string
      workdaysJson: string
      holidaysJson: string
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'String'>
    readonly teamId: FieldRef<"Schedule", 'String'>
    readonly tz: FieldRef<"Schedule", 'String'>
    readonly workdaysJson: FieldRef<"Schedule", 'String'>
    readonly holidaysJson: FieldRef<"Schedule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    userId: string | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    userId: string | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    requestId: number
    userId: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    requestId: string
    userId: string
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    request?: boolean | RequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    requestId?: boolean
    userId?: boolean
  }

  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | RequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      request: Prisma.$RequestPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      userId: string
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends RequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestDefaultArgs<ExtArgs>>): Prisma__RequestClient<$Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly requestId: FieldRef<"Subscription", 'String'>
    readonly userId: FieldRef<"Subscription", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    teamId: 'teamId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const RequestTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    schemaJson: 'schemaJson',
    defaultSlaMinutes: 'defaultSlaMinutes'
  };

  export type RequestTypeScalarFieldEnum = (typeof RequestTypeScalarFieldEnum)[keyof typeof RequestTypeScalarFieldEnum]


  export const RequestScalarFieldEnum: {
    id: 'id',
    typeId: 'typeId',
    createdById: 'createdById',
    assigneeId: 'assigneeId',
    teamId: 'teamId',
    title: 'title',
    description: 'description',
    priority: 'priority',
    currentStatus: 'currentStatus',
    metadataJson: 'metadataJson',
    dueAt: 'dueAt',
    slaBreachAt: 'slaBreachAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequestScalarFieldEnum = (typeof RequestScalarFieldEnum)[keyof typeof RequestScalarFieldEnum]


  export const RequestEventScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    actorId: 'actorId',
    eventType: 'eventType',
    payloadJson: 'payloadJson',
    createdAt: 'createdAt'
  };

  export type RequestEventScalarFieldEnum = (typeof RequestEventScalarFieldEnum)[keyof typeof RequestEventScalarFieldEnum]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    uploadedById: 'uploadedById',
    url: 'url',
    name: 'name',
    size: 'size',
    mime: 'mime',
    createdAt: 'createdAt'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const SLAConfigScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    typeId: 'typeId',
    priority: 'priority',
    targetMinutes: 'targetMinutes'
  };

  export type SLAConfigScalarFieldEnum = (typeof SLAConfigScalarFieldEnum)[keyof typeof SLAConfigScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    tz: 'tz',
    workdaysJson: 'workdaysJson',
    holidaysJson: 'holidaysJson'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    userId: 'userId'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    teamId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    requestsCreated?: RequestListRelationFilter
    requestsAssigned?: RequestListRelationFilter
    events?: RequestEventListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    attachmentsUploaded?: AttachmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    teamId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    requestsCreated?: RequestOrderByRelationAggregateInput
    requestsAssigned?: RequestOrderByRelationAggregateInput
    events?: RequestEventOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    attachmentsUploaded?: AttachmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    teamId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    requestsCreated?: RequestListRelationFilter
    requestsAssigned?: RequestListRelationFilter
    events?: RequestEventListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    attachmentsUploaded?: AttachmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    teamId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    teamId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    users?: UserListRelationFilter
    slaConfigs?: SLAConfigListRelationFilter
    schedules?: ScheduleListRelationFilter
    requests?: RequestListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
    slaConfigs?: SLAConfigOrderByRelationAggregateInput
    schedules?: ScheduleOrderByRelationAggregateInput
    requests?: RequestOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    users?: UserListRelationFilter
    slaConfigs?: SLAConfigListRelationFilter
    schedules?: ScheduleListRelationFilter
    requests?: RequestListRelationFilter
  }, "id" | "name">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
  }

  export type RequestTypeWhereInput = {
    AND?: RequestTypeWhereInput | RequestTypeWhereInput[]
    OR?: RequestTypeWhereInput[]
    NOT?: RequestTypeWhereInput | RequestTypeWhereInput[]
    id?: StringFilter<"RequestType"> | string
    name?: StringFilter<"RequestType"> | string
    schemaJson?: StringFilter<"RequestType"> | string
    defaultSlaMinutes?: IntFilter<"RequestType"> | number
    requests?: RequestListRelationFilter
    slaConfigs?: SLAConfigListRelationFilter
  }

  export type RequestTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    schemaJson?: SortOrder
    defaultSlaMinutes?: SortOrder
    requests?: RequestOrderByRelationAggregateInput
    slaConfigs?: SLAConfigOrderByRelationAggregateInput
  }

  export type RequestTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RequestTypeWhereInput | RequestTypeWhereInput[]
    OR?: RequestTypeWhereInput[]
    NOT?: RequestTypeWhereInput | RequestTypeWhereInput[]
    schemaJson?: StringFilter<"RequestType"> | string
    defaultSlaMinutes?: IntFilter<"RequestType"> | number
    requests?: RequestListRelationFilter
    slaConfigs?: SLAConfigListRelationFilter
  }, "id" | "name">

  export type RequestTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    schemaJson?: SortOrder
    defaultSlaMinutes?: SortOrder
    _count?: RequestTypeCountOrderByAggregateInput
    _avg?: RequestTypeAvgOrderByAggregateInput
    _max?: RequestTypeMaxOrderByAggregateInput
    _min?: RequestTypeMinOrderByAggregateInput
    _sum?: RequestTypeSumOrderByAggregateInput
  }

  export type RequestTypeScalarWhereWithAggregatesInput = {
    AND?: RequestTypeScalarWhereWithAggregatesInput | RequestTypeScalarWhereWithAggregatesInput[]
    OR?: RequestTypeScalarWhereWithAggregatesInput[]
    NOT?: RequestTypeScalarWhereWithAggregatesInput | RequestTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RequestType"> | string
    name?: StringWithAggregatesFilter<"RequestType"> | string
    schemaJson?: StringWithAggregatesFilter<"RequestType"> | string
    defaultSlaMinutes?: IntWithAggregatesFilter<"RequestType"> | number
  }

  export type RequestWhereInput = {
    AND?: RequestWhereInput | RequestWhereInput[]
    OR?: RequestWhereInput[]
    NOT?: RequestWhereInput | RequestWhereInput[]
    id?: StringFilter<"Request"> | string
    typeId?: StringFilter<"Request"> | string
    createdById?: StringFilter<"Request"> | string
    assigneeId?: StringNullableFilter<"Request"> | string | null
    teamId?: StringNullableFilter<"Request"> | string | null
    title?: StringFilter<"Request"> | string
    description?: StringFilter<"Request"> | string
    priority?: StringFilter<"Request"> | string
    currentStatus?: StringFilter<"Request"> | string
    metadataJson?: StringFilter<"Request"> | string
    dueAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    slaBreachAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    createdAt?: DateTimeFilter<"Request"> | Date | string
    updatedAt?: DateTimeFilter<"Request"> | Date | string
    type?: XOR<RequestTypeRelationFilter, RequestTypeWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    assignee?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    events?: RequestEventListRelationFilter
    attachments?: AttachmentListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
  }

  export type RequestOrderByWithRelationInput = {
    id?: SortOrder
    typeId?: SortOrder
    createdById?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    currentStatus?: SortOrder
    metadataJson?: SortOrder
    dueAt?: SortOrderInput | SortOrder
    slaBreachAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: RequestTypeOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    events?: RequestEventOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
  }

  export type RequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RequestWhereInput | RequestWhereInput[]
    OR?: RequestWhereInput[]
    NOT?: RequestWhereInput | RequestWhereInput[]
    typeId?: StringFilter<"Request"> | string
    createdById?: StringFilter<"Request"> | string
    assigneeId?: StringNullableFilter<"Request"> | string | null
    teamId?: StringNullableFilter<"Request"> | string | null
    title?: StringFilter<"Request"> | string
    description?: StringFilter<"Request"> | string
    priority?: StringFilter<"Request"> | string
    currentStatus?: StringFilter<"Request"> | string
    metadataJson?: StringFilter<"Request"> | string
    dueAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    slaBreachAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    createdAt?: DateTimeFilter<"Request"> | Date | string
    updatedAt?: DateTimeFilter<"Request"> | Date | string
    type?: XOR<RequestTypeRelationFilter, RequestTypeWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    assignee?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
    events?: RequestEventListRelationFilter
    attachments?: AttachmentListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
  }, "id">

  export type RequestOrderByWithAggregationInput = {
    id?: SortOrder
    typeId?: SortOrder
    createdById?: SortOrder
    assigneeId?: SortOrderInput | SortOrder
    teamId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    currentStatus?: SortOrder
    metadataJson?: SortOrder
    dueAt?: SortOrderInput | SortOrder
    slaBreachAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequestCountOrderByAggregateInput
    _max?: RequestMaxOrderByAggregateInput
    _min?: RequestMinOrderByAggregateInput
  }

  export type RequestScalarWhereWithAggregatesInput = {
    AND?: RequestScalarWhereWithAggregatesInput | RequestScalarWhereWithAggregatesInput[]
    OR?: RequestScalarWhereWithAggregatesInput[]
    NOT?: RequestScalarWhereWithAggregatesInput | RequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Request"> | string
    typeId?: StringWithAggregatesFilter<"Request"> | string
    createdById?: StringWithAggregatesFilter<"Request"> | string
    assigneeId?: StringNullableWithAggregatesFilter<"Request"> | string | null
    teamId?: StringNullableWithAggregatesFilter<"Request"> | string | null
    title?: StringWithAggregatesFilter<"Request"> | string
    description?: StringWithAggregatesFilter<"Request"> | string
    priority?: StringWithAggregatesFilter<"Request"> | string
    currentStatus?: StringWithAggregatesFilter<"Request"> | string
    metadataJson?: StringWithAggregatesFilter<"Request"> | string
    dueAt?: DateTimeNullableWithAggregatesFilter<"Request"> | Date | string | null
    slaBreachAt?: DateTimeNullableWithAggregatesFilter<"Request"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Request"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Request"> | Date | string
  }

  export type RequestEventWhereInput = {
    AND?: RequestEventWhereInput | RequestEventWhereInput[]
    OR?: RequestEventWhereInput[]
    NOT?: RequestEventWhereInput | RequestEventWhereInput[]
    id?: StringFilter<"RequestEvent"> | string
    requestId?: StringFilter<"RequestEvent"> | string
    actorId?: StringFilter<"RequestEvent"> | string
    eventType?: StringFilter<"RequestEvent"> | string
    payloadJson?: StringFilter<"RequestEvent"> | string
    createdAt?: DateTimeFilter<"RequestEvent"> | Date | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    actor?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RequestEventOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    actorId?: SortOrder
    eventType?: SortOrder
    payloadJson?: SortOrder
    createdAt?: SortOrder
    request?: RequestOrderByWithRelationInput
    actor?: UserOrderByWithRelationInput
  }

  export type RequestEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RequestEventWhereInput | RequestEventWhereInput[]
    OR?: RequestEventWhereInput[]
    NOT?: RequestEventWhereInput | RequestEventWhereInput[]
    requestId?: StringFilter<"RequestEvent"> | string
    actorId?: StringFilter<"RequestEvent"> | string
    eventType?: StringFilter<"RequestEvent"> | string
    payloadJson?: StringFilter<"RequestEvent"> | string
    createdAt?: DateTimeFilter<"RequestEvent"> | Date | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    actor?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type RequestEventOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    actorId?: SortOrder
    eventType?: SortOrder
    payloadJson?: SortOrder
    createdAt?: SortOrder
    _count?: RequestEventCountOrderByAggregateInput
    _max?: RequestEventMaxOrderByAggregateInput
    _min?: RequestEventMinOrderByAggregateInput
  }

  export type RequestEventScalarWhereWithAggregatesInput = {
    AND?: RequestEventScalarWhereWithAggregatesInput | RequestEventScalarWhereWithAggregatesInput[]
    OR?: RequestEventScalarWhereWithAggregatesInput[]
    NOT?: RequestEventScalarWhereWithAggregatesInput | RequestEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RequestEvent"> | string
    requestId?: StringWithAggregatesFilter<"RequestEvent"> | string
    actorId?: StringWithAggregatesFilter<"RequestEvent"> | string
    eventType?: StringWithAggregatesFilter<"RequestEvent"> | string
    payloadJson?: StringWithAggregatesFilter<"RequestEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RequestEvent"> | Date | string
  }

  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: StringFilter<"Attachment"> | string
    requestId?: StringFilter<"Attachment"> | string
    uploadedById?: StringFilter<"Attachment"> | string
    url?: StringFilter<"Attachment"> | string
    name?: StringFilter<"Attachment"> | string
    size?: IntFilter<"Attachment"> | number
    mime?: StringFilter<"Attachment"> | string
    createdAt?: DateTimeFilter<"Attachment"> | Date | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    uploadedById?: SortOrder
    url?: SortOrder
    name?: SortOrder
    size?: SortOrder
    mime?: SortOrder
    createdAt?: SortOrder
    request?: RequestOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    requestId?: StringFilter<"Attachment"> | string
    uploadedById?: StringFilter<"Attachment"> | string
    url?: StringFilter<"Attachment"> | string
    name?: StringFilter<"Attachment"> | string
    size?: IntFilter<"Attachment"> | number
    mime?: StringFilter<"Attachment"> | string
    createdAt?: DateTimeFilter<"Attachment"> | Date | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    uploadedById?: SortOrder
    url?: SortOrder
    name?: SortOrder
    size?: SortOrder
    mime?: SortOrder
    createdAt?: SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _avg?: AttachmentAvgOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
    _sum?: AttachmentSumOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attachment"> | string
    requestId?: StringWithAggregatesFilter<"Attachment"> | string
    uploadedById?: StringWithAggregatesFilter<"Attachment"> | string
    url?: StringWithAggregatesFilter<"Attachment"> | string
    name?: StringWithAggregatesFilter<"Attachment"> | string
    size?: IntWithAggregatesFilter<"Attachment"> | number
    mime?: StringWithAggregatesFilter<"Attachment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Attachment"> | Date | string
  }

  export type SLAConfigWhereInput = {
    AND?: SLAConfigWhereInput | SLAConfigWhereInput[]
    OR?: SLAConfigWhereInput[]
    NOT?: SLAConfigWhereInput | SLAConfigWhereInput[]
    id?: StringFilter<"SLAConfig"> | string
    teamId?: StringFilter<"SLAConfig"> | string
    typeId?: StringFilter<"SLAConfig"> | string
    priority?: StringFilter<"SLAConfig"> | string
    targetMinutes?: IntFilter<"SLAConfig"> | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    type?: XOR<RequestTypeRelationFilter, RequestTypeWhereInput>
  }

  export type SLAConfigOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    priority?: SortOrder
    targetMinutes?: SortOrder
    team?: TeamOrderByWithRelationInput
    type?: RequestTypeOrderByWithRelationInput
  }

  export type SLAConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SLAConfigWhereInput | SLAConfigWhereInput[]
    OR?: SLAConfigWhereInput[]
    NOT?: SLAConfigWhereInput | SLAConfigWhereInput[]
    teamId?: StringFilter<"SLAConfig"> | string
    typeId?: StringFilter<"SLAConfig"> | string
    priority?: StringFilter<"SLAConfig"> | string
    targetMinutes?: IntFilter<"SLAConfig"> | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    type?: XOR<RequestTypeRelationFilter, RequestTypeWhereInput>
  }, "id">

  export type SLAConfigOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    priority?: SortOrder
    targetMinutes?: SortOrder
    _count?: SLAConfigCountOrderByAggregateInput
    _avg?: SLAConfigAvgOrderByAggregateInput
    _max?: SLAConfigMaxOrderByAggregateInput
    _min?: SLAConfigMinOrderByAggregateInput
    _sum?: SLAConfigSumOrderByAggregateInput
  }

  export type SLAConfigScalarWhereWithAggregatesInput = {
    AND?: SLAConfigScalarWhereWithAggregatesInput | SLAConfigScalarWhereWithAggregatesInput[]
    OR?: SLAConfigScalarWhereWithAggregatesInput[]
    NOT?: SLAConfigScalarWhereWithAggregatesInput | SLAConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SLAConfig"> | string
    teamId?: StringWithAggregatesFilter<"SLAConfig"> | string
    typeId?: StringWithAggregatesFilter<"SLAConfig"> | string
    priority?: StringWithAggregatesFilter<"SLAConfig"> | string
    targetMinutes?: IntWithAggregatesFilter<"SLAConfig"> | number
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: StringFilter<"Schedule"> | string
    teamId?: StringFilter<"Schedule"> | string
    tz?: StringFilter<"Schedule"> | string
    workdaysJson?: StringFilter<"Schedule"> | string
    holidaysJson?: StringFilter<"Schedule"> | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    tz?: SortOrder
    workdaysJson?: SortOrder
    holidaysJson?: SortOrder
    team?: TeamOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    teamId?: StringFilter<"Schedule"> | string
    tz?: StringFilter<"Schedule"> | string
    workdaysJson?: StringFilter<"Schedule"> | string
    holidaysJson?: StringFilter<"Schedule"> | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    tz?: SortOrder
    workdaysJson?: SortOrder
    holidaysJson?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Schedule"> | string
    teamId?: StringWithAggregatesFilter<"Schedule"> | string
    tz?: StringWithAggregatesFilter<"Schedule"> | string
    workdaysJson?: StringWithAggregatesFilter<"Schedule"> | string
    holidaysJson?: StringWithAggregatesFilter<"Schedule"> | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    requestId?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    request?: RequestOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    requestId?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    request?: XOR<RequestRelationFilter, RequestWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    requestId?: StringWithAggregatesFilter<"Subscription"> | string
    userId?: StringWithAggregatesFilter<"Subscription"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedOneWithoutUsersInput
    requestsCreated?: RequestCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestCreateNestedManyWithoutAssigneeInput
    events?: RequestEventCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestUncheckedCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestUncheckedCreateNestedManyWithoutAssigneeInput
    events?: RequestEventUncheckedCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutUsersNestedInput
    requestsCreated?: RequestUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUncheckedUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUncheckedUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUncheckedUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    id?: string
    name: string
    users?: UserCreateNestedManyWithoutTeamInput
    slaConfigs?: SLAConfigCreateNestedManyWithoutTeamInput
    schedules?: ScheduleCreateNestedManyWithoutTeamInput
    requests?: RequestCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    name: string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    slaConfigs?: SLAConfigUncheckedCreateNestedManyWithoutTeamInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutTeamInput
    requests?: RequestUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTeamNestedInput
    slaConfigs?: SLAConfigUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUpdateManyWithoutTeamNestedInput
    requests?: RequestUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    slaConfigs?: SLAConfigUncheckedUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutTeamNestedInput
    requests?: RequestUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    name: string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RequestTypeCreateInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
    requests?: RequestCreateNestedManyWithoutTypeInput
    slaConfigs?: SLAConfigCreateNestedManyWithoutTypeInput
  }

  export type RequestTypeUncheckedCreateInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
    requests?: RequestUncheckedCreateNestedManyWithoutTypeInput
    slaConfigs?: SLAConfigUncheckedCreateNestedManyWithoutTypeInput
  }

  export type RequestTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
    requests?: RequestUpdateManyWithoutTypeNestedInput
    slaConfigs?: SLAConfigUpdateManyWithoutTypeNestedInput
  }

  export type RequestTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
    requests?: RequestUncheckedUpdateManyWithoutTypeNestedInput
    slaConfigs?: SLAConfigUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type RequestTypeCreateManyInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
  }

  export type RequestTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type RequestTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type RequestCreateInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestCreateManyInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestEventCreateInput = {
    id?: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutEventsInput
    actor: UserCreateNestedOneWithoutEventsInput
  }

  export type RequestEventUncheckedCreateInput = {
    id?: string
    requestId: string
    actorId: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
  }

  export type RequestEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutEventsNestedInput
    actor?: UserUpdateOneRequiredWithoutEventsNestedInput
  }

  export type RequestEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    actorId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestEventCreateManyInput = {
    id?: string
    requestId: string
    actorId: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
  }

  export type RequestEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    actorId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateInput = {
    id?: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutAttachmentsInput
    uploadedBy: UserCreateNestedOneWithoutAttachmentsUploadedInput
  }

  export type AttachmentUncheckedCreateInput = {
    id?: string
    requestId: string
    uploadedById: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
  }

  export type AttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutAttachmentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutAttachmentsUploadedNestedInput
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateManyInput = {
    id?: string
    requestId: string
    uploadedById: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
  }

  export type AttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SLAConfigCreateInput = {
    id?: string
    priority: string
    targetMinutes: number
    team: TeamCreateNestedOneWithoutSlaConfigsInput
    type: RequestTypeCreateNestedOneWithoutSlaConfigsInput
  }

  export type SLAConfigUncheckedCreateInput = {
    id?: string
    teamId: string
    typeId: string
    priority: string
    targetMinutes: number
  }

  export type SLAConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutSlaConfigsNestedInput
    type?: RequestTypeUpdateOneRequiredWithoutSlaConfigsNestedInput
  }

  export type SLAConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type SLAConfigCreateManyInput = {
    id?: string
    teamId: string
    typeId: string
    priority: string
    targetMinutes: number
  }

  export type SLAConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type SLAConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleCreateInput = {
    id?: string
    tz: string
    workdaysJson: string
    holidaysJson: string
    team: TeamCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: string
    teamId: string
    tz: string
    workdaysJson: string
    holidaysJson: string
  }

  export type ScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleCreateManyInput = {
    id?: string
    teamId: string
    tz: string
    workdaysJson: string
    holidaysJson: string
  }

  export type ScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    request: RequestCreateNestedOneWithoutSubscriptionsInput
    user: UserCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    requestId: string
    userId: string
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    request?: RequestUpdateOneRequiredWithoutSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    requestId: string
    userId: string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TeamNullableRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type RequestListRelationFilter = {
    every?: RequestWhereInput
    some?: RequestWhereInput
    none?: RequestWhereInput
  }

  export type RequestEventListRelationFilter = {
    every?: RequestEventWhereInput
    some?: RequestEventWhereInput
    none?: RequestEventWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type AttachmentListRelationFilter = {
    every?: AttachmentWhereInput
    some?: AttachmentWhereInput
    none?: AttachmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    teamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    teamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    teamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SLAConfigListRelationFilter = {
    every?: SLAConfigWhereInput
    some?: SLAConfigWhereInput
    none?: SLAConfigWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SLAConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RequestTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    schemaJson?: SortOrder
    defaultSlaMinutes?: SortOrder
  }

  export type RequestTypeAvgOrderByAggregateInput = {
    defaultSlaMinutes?: SortOrder
  }

  export type RequestTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    schemaJson?: SortOrder
    defaultSlaMinutes?: SortOrder
  }

  export type RequestTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    schemaJson?: SortOrder
    defaultSlaMinutes?: SortOrder
  }

  export type RequestTypeSumOrderByAggregateInput = {
    defaultSlaMinutes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type RequestTypeRelationFilter = {
    is?: RequestTypeWhereInput
    isNot?: RequestTypeWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RequestCountOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    createdById?: SortOrder
    assigneeId?: SortOrder
    teamId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    currentStatus?: SortOrder
    metadataJson?: SortOrder
    dueAt?: SortOrder
    slaBreachAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestMaxOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    createdById?: SortOrder
    assigneeId?: SortOrder
    teamId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    currentStatus?: SortOrder
    metadataJson?: SortOrder
    dueAt?: SortOrder
    slaBreachAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestMinOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    createdById?: SortOrder
    assigneeId?: SortOrder
    teamId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    currentStatus?: SortOrder
    metadataJson?: SortOrder
    dueAt?: SortOrder
    slaBreachAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type RequestRelationFilter = {
    is?: RequestWhereInput
    isNot?: RequestWhereInput
  }

  export type RequestEventCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    actorId?: SortOrder
    eventType?: SortOrder
    payloadJson?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestEventMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    actorId?: SortOrder
    eventType?: SortOrder
    payloadJson?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestEventMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    actorId?: SortOrder
    eventType?: SortOrder
    payloadJson?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    uploadedById?: SortOrder
    url?: SortOrder
    name?: SortOrder
    size?: SortOrder
    mime?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    uploadedById?: SortOrder
    url?: SortOrder
    name?: SortOrder
    size?: SortOrder
    mime?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    uploadedById?: SortOrder
    url?: SortOrder
    name?: SortOrder
    size?: SortOrder
    mime?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type SLAConfigCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    priority?: SortOrder
    targetMinutes?: SortOrder
  }

  export type SLAConfigAvgOrderByAggregateInput = {
    targetMinutes?: SortOrder
  }

  export type SLAConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    priority?: SortOrder
    targetMinutes?: SortOrder
  }

  export type SLAConfigMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    priority?: SortOrder
    targetMinutes?: SortOrder
  }

  export type SLAConfigSumOrderByAggregateInput = {
    targetMinutes?: SortOrder
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    tz?: SortOrder
    workdaysJson?: SortOrder
    holidaysJson?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    tz?: SortOrder
    workdaysJson?: SortOrder
    holidaysJson?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    tz?: SortOrder
    workdaysJson?: SortOrder
    holidaysJson?: SortOrder
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type TeamCreateNestedOneWithoutUsersInput = {
    create?: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUsersInput
    connect?: TeamWhereUniqueInput
  }

  export type RequestCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RequestCreateWithoutCreatedByInput, RequestUncheckedCreateWithoutCreatedByInput> | RequestCreateWithoutCreatedByInput[] | RequestUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutCreatedByInput | RequestCreateOrConnectWithoutCreatedByInput[]
    createMany?: RequestCreateManyCreatedByInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type RequestCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<RequestCreateWithoutAssigneeInput, RequestUncheckedCreateWithoutAssigneeInput> | RequestCreateWithoutAssigneeInput[] | RequestUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutAssigneeInput | RequestCreateOrConnectWithoutAssigneeInput[]
    createMany?: RequestCreateManyAssigneeInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type RequestEventCreateNestedManyWithoutActorInput = {
    create?: XOR<RequestEventCreateWithoutActorInput, RequestEventUncheckedCreateWithoutActorInput> | RequestEventCreateWithoutActorInput[] | RequestEventUncheckedCreateWithoutActorInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutActorInput | RequestEventCreateOrConnectWithoutActorInput[]
    createMany?: RequestEventCreateManyActorInputEnvelope
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type RequestUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RequestCreateWithoutCreatedByInput, RequestUncheckedCreateWithoutCreatedByInput> | RequestCreateWithoutCreatedByInput[] | RequestUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutCreatedByInput | RequestCreateOrConnectWithoutCreatedByInput[]
    createMany?: RequestCreateManyCreatedByInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type RequestUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<RequestCreateWithoutAssigneeInput, RequestUncheckedCreateWithoutAssigneeInput> | RequestCreateWithoutAssigneeInput[] | RequestUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutAssigneeInput | RequestCreateOrConnectWithoutAssigneeInput[]
    createMany?: RequestCreateManyAssigneeInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type RequestEventUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<RequestEventCreateWithoutActorInput, RequestEventUncheckedCreateWithoutActorInput> | RequestEventCreateWithoutActorInput[] | RequestEventUncheckedCreateWithoutActorInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutActorInput | RequestEventCreateOrConnectWithoutActorInput[]
    createMany?: RequestEventCreateManyActorInputEnvelope
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TeamUpdateOneWithoutUsersNestedInput = {
    create?: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUsersInput
    upsert?: TeamUpsertWithoutUsersInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutUsersInput, TeamUpdateWithoutUsersInput>, TeamUncheckedUpdateWithoutUsersInput>
  }

  export type RequestUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RequestCreateWithoutCreatedByInput, RequestUncheckedCreateWithoutCreatedByInput> | RequestCreateWithoutCreatedByInput[] | RequestUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutCreatedByInput | RequestCreateOrConnectWithoutCreatedByInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutCreatedByInput | RequestUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RequestCreateManyCreatedByInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutCreatedByInput | RequestUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutCreatedByInput | RequestUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<RequestCreateWithoutAssigneeInput, RequestUncheckedCreateWithoutAssigneeInput> | RequestCreateWithoutAssigneeInput[] | RequestUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutAssigneeInput | RequestCreateOrConnectWithoutAssigneeInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutAssigneeInput | RequestUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: RequestCreateManyAssigneeInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutAssigneeInput | RequestUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutAssigneeInput | RequestUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestEventUpdateManyWithoutActorNestedInput = {
    create?: XOR<RequestEventCreateWithoutActorInput, RequestEventUncheckedCreateWithoutActorInput> | RequestEventCreateWithoutActorInput[] | RequestEventUncheckedCreateWithoutActorInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutActorInput | RequestEventCreateOrConnectWithoutActorInput[]
    upsert?: RequestEventUpsertWithWhereUniqueWithoutActorInput | RequestEventUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: RequestEventCreateManyActorInputEnvelope
    set?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    disconnect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    delete?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    update?: RequestEventUpdateWithWhereUniqueWithoutActorInput | RequestEventUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: RequestEventUpdateManyWithWhereWithoutActorInput | RequestEventUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: RequestEventScalarWhereInput | RequestEventScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutUploadedByInput | AttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutUploadedByInput | AttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutUploadedByInput | AttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RequestUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RequestCreateWithoutCreatedByInput, RequestUncheckedCreateWithoutCreatedByInput> | RequestCreateWithoutCreatedByInput[] | RequestUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutCreatedByInput | RequestCreateOrConnectWithoutCreatedByInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutCreatedByInput | RequestUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RequestCreateManyCreatedByInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutCreatedByInput | RequestUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutCreatedByInput | RequestUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<RequestCreateWithoutAssigneeInput, RequestUncheckedCreateWithoutAssigneeInput> | RequestCreateWithoutAssigneeInput[] | RequestUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutAssigneeInput | RequestCreateOrConnectWithoutAssigneeInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutAssigneeInput | RequestUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: RequestCreateManyAssigneeInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutAssigneeInput | RequestUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutAssigneeInput | RequestUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestEventUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<RequestEventCreateWithoutActorInput, RequestEventUncheckedCreateWithoutActorInput> | RequestEventCreateWithoutActorInput[] | RequestEventUncheckedCreateWithoutActorInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutActorInput | RequestEventCreateOrConnectWithoutActorInput[]
    upsert?: RequestEventUpsertWithWhereUniqueWithoutActorInput | RequestEventUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: RequestEventCreateManyActorInputEnvelope
    set?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    disconnect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    delete?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    update?: RequestEventUpdateWithWhereUniqueWithoutActorInput | RequestEventUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: RequestEventUpdateManyWithWhereWithoutActorInput | RequestEventUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: RequestEventScalarWhereInput | RequestEventScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutUploadedByInput | AttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutUploadedByInput | AttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutUploadedByInput | AttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SLAConfigCreateNestedManyWithoutTeamInput = {
    create?: XOR<SLAConfigCreateWithoutTeamInput, SLAConfigUncheckedCreateWithoutTeamInput> | SLAConfigCreateWithoutTeamInput[] | SLAConfigUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTeamInput | SLAConfigCreateOrConnectWithoutTeamInput[]
    createMany?: SLAConfigCreateManyTeamInputEnvelope
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeamInput, ScheduleUncheckedCreateWithoutTeamInput> | ScheduleCreateWithoutTeamInput[] | ScheduleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeamInput | ScheduleCreateOrConnectWithoutTeamInput[]
    createMany?: ScheduleCreateManyTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type RequestCreateNestedManyWithoutTeamInput = {
    create?: XOR<RequestCreateWithoutTeamInput, RequestUncheckedCreateWithoutTeamInput> | RequestCreateWithoutTeamInput[] | RequestUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTeamInput | RequestCreateOrConnectWithoutTeamInput[]
    createMany?: RequestCreateManyTeamInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SLAConfigUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SLAConfigCreateWithoutTeamInput, SLAConfigUncheckedCreateWithoutTeamInput> | SLAConfigCreateWithoutTeamInput[] | SLAConfigUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTeamInput | SLAConfigCreateOrConnectWithoutTeamInput[]
    createMany?: SLAConfigCreateManyTeamInputEnvelope
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<ScheduleCreateWithoutTeamInput, ScheduleUncheckedCreateWithoutTeamInput> | ScheduleCreateWithoutTeamInput[] | ScheduleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeamInput | ScheduleCreateOrConnectWithoutTeamInput[]
    createMany?: ScheduleCreateManyTeamInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type RequestUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<RequestCreateWithoutTeamInput, RequestUncheckedCreateWithoutTeamInput> | RequestCreateWithoutTeamInput[] | RequestUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTeamInput | RequestCreateOrConnectWithoutTeamInput[]
    createMany?: RequestCreateManyTeamInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamInput | UserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamInput | UserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamInput | UserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SLAConfigUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SLAConfigCreateWithoutTeamInput, SLAConfigUncheckedCreateWithoutTeamInput> | SLAConfigCreateWithoutTeamInput[] | SLAConfigUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTeamInput | SLAConfigCreateOrConnectWithoutTeamInput[]
    upsert?: SLAConfigUpsertWithWhereUniqueWithoutTeamInput | SLAConfigUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SLAConfigCreateManyTeamInputEnvelope
    set?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    disconnect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    delete?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    update?: SLAConfigUpdateWithWhereUniqueWithoutTeamInput | SLAConfigUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SLAConfigUpdateManyWithWhereWithoutTeamInput | SLAConfigUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SLAConfigScalarWhereInput | SLAConfigScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeamInput, ScheduleUncheckedCreateWithoutTeamInput> | ScheduleCreateWithoutTeamInput[] | ScheduleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeamInput | ScheduleCreateOrConnectWithoutTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ScheduleCreateManyTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeamInput | ScheduleUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type RequestUpdateManyWithoutTeamNestedInput = {
    create?: XOR<RequestCreateWithoutTeamInput, RequestUncheckedCreateWithoutTeamInput> | RequestCreateWithoutTeamInput[] | RequestUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTeamInput | RequestCreateOrConnectWithoutTeamInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutTeamInput | RequestUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: RequestCreateManyTeamInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutTeamInput | RequestUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutTeamInput | RequestUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamInput | UserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamInput | UserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamInput | UserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SLAConfigUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SLAConfigCreateWithoutTeamInput, SLAConfigUncheckedCreateWithoutTeamInput> | SLAConfigCreateWithoutTeamInput[] | SLAConfigUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTeamInput | SLAConfigCreateOrConnectWithoutTeamInput[]
    upsert?: SLAConfigUpsertWithWhereUniqueWithoutTeamInput | SLAConfigUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SLAConfigCreateManyTeamInputEnvelope
    set?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    disconnect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    delete?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    update?: SLAConfigUpdateWithWhereUniqueWithoutTeamInput | SLAConfigUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SLAConfigUpdateManyWithWhereWithoutTeamInput | SLAConfigUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SLAConfigScalarWhereInput | SLAConfigScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<ScheduleCreateWithoutTeamInput, ScheduleUncheckedCreateWithoutTeamInput> | ScheduleCreateWithoutTeamInput[] | ScheduleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutTeamInput | ScheduleCreateOrConnectWithoutTeamInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutTeamInput | ScheduleUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: ScheduleCreateManyTeamInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutTeamInput | ScheduleUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutTeamInput | ScheduleUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type RequestUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<RequestCreateWithoutTeamInput, RequestUncheckedCreateWithoutTeamInput> | RequestCreateWithoutTeamInput[] | RequestUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTeamInput | RequestCreateOrConnectWithoutTeamInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutTeamInput | RequestUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: RequestCreateManyTeamInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutTeamInput | RequestUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutTeamInput | RequestUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type RequestCreateNestedManyWithoutTypeInput = {
    create?: XOR<RequestCreateWithoutTypeInput, RequestUncheckedCreateWithoutTypeInput> | RequestCreateWithoutTypeInput[] | RequestUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTypeInput | RequestCreateOrConnectWithoutTypeInput[]
    createMany?: RequestCreateManyTypeInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type SLAConfigCreateNestedManyWithoutTypeInput = {
    create?: XOR<SLAConfigCreateWithoutTypeInput, SLAConfigUncheckedCreateWithoutTypeInput> | SLAConfigCreateWithoutTypeInput[] | SLAConfigUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTypeInput | SLAConfigCreateOrConnectWithoutTypeInput[]
    createMany?: SLAConfigCreateManyTypeInputEnvelope
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
  }

  export type RequestUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<RequestCreateWithoutTypeInput, RequestUncheckedCreateWithoutTypeInput> | RequestCreateWithoutTypeInput[] | RequestUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTypeInput | RequestCreateOrConnectWithoutTypeInput[]
    createMany?: RequestCreateManyTypeInputEnvelope
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
  }

  export type SLAConfigUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<SLAConfigCreateWithoutTypeInput, SLAConfigUncheckedCreateWithoutTypeInput> | SLAConfigCreateWithoutTypeInput[] | SLAConfigUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTypeInput | SLAConfigCreateOrConnectWithoutTypeInput[]
    createMany?: SLAConfigCreateManyTypeInputEnvelope
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RequestUpdateManyWithoutTypeNestedInput = {
    create?: XOR<RequestCreateWithoutTypeInput, RequestUncheckedCreateWithoutTypeInput> | RequestCreateWithoutTypeInput[] | RequestUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTypeInput | RequestCreateOrConnectWithoutTypeInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutTypeInput | RequestUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: RequestCreateManyTypeInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutTypeInput | RequestUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutTypeInput | RequestUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type SLAConfigUpdateManyWithoutTypeNestedInput = {
    create?: XOR<SLAConfigCreateWithoutTypeInput, SLAConfigUncheckedCreateWithoutTypeInput> | SLAConfigCreateWithoutTypeInput[] | SLAConfigUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTypeInput | SLAConfigCreateOrConnectWithoutTypeInput[]
    upsert?: SLAConfigUpsertWithWhereUniqueWithoutTypeInput | SLAConfigUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: SLAConfigCreateManyTypeInputEnvelope
    set?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    disconnect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    delete?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    update?: SLAConfigUpdateWithWhereUniqueWithoutTypeInput | SLAConfigUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: SLAConfigUpdateManyWithWhereWithoutTypeInput | SLAConfigUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: SLAConfigScalarWhereInput | SLAConfigScalarWhereInput[]
  }

  export type RequestUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<RequestCreateWithoutTypeInput, RequestUncheckedCreateWithoutTypeInput> | RequestCreateWithoutTypeInput[] | RequestUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: RequestCreateOrConnectWithoutTypeInput | RequestCreateOrConnectWithoutTypeInput[]
    upsert?: RequestUpsertWithWhereUniqueWithoutTypeInput | RequestUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: RequestCreateManyTypeInputEnvelope
    set?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    disconnect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    delete?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    connect?: RequestWhereUniqueInput | RequestWhereUniqueInput[]
    update?: RequestUpdateWithWhereUniqueWithoutTypeInput | RequestUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: RequestUpdateManyWithWhereWithoutTypeInput | RequestUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: RequestScalarWhereInput | RequestScalarWhereInput[]
  }

  export type SLAConfigUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<SLAConfigCreateWithoutTypeInput, SLAConfigUncheckedCreateWithoutTypeInput> | SLAConfigCreateWithoutTypeInput[] | SLAConfigUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SLAConfigCreateOrConnectWithoutTypeInput | SLAConfigCreateOrConnectWithoutTypeInput[]
    upsert?: SLAConfigUpsertWithWhereUniqueWithoutTypeInput | SLAConfigUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: SLAConfigCreateManyTypeInputEnvelope
    set?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    disconnect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    delete?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    connect?: SLAConfigWhereUniqueInput | SLAConfigWhereUniqueInput[]
    update?: SLAConfigUpdateWithWhereUniqueWithoutTypeInput | SLAConfigUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: SLAConfigUpdateManyWithWhereWithoutTypeInput | SLAConfigUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: SLAConfigScalarWhereInput | SLAConfigScalarWhereInput[]
  }

  export type RequestTypeCreateNestedOneWithoutRequestsInput = {
    create?: XOR<RequestTypeCreateWithoutRequestsInput, RequestTypeUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: RequestTypeCreateOrConnectWithoutRequestsInput
    connect?: RequestTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestsCreatedInput = {
    create?: XOR<UserCreateWithoutRequestsCreatedInput, UserUncheckedCreateWithoutRequestsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestsAssignedInput = {
    create?: XOR<UserCreateWithoutRequestsAssignedInput, UserUncheckedCreateWithoutRequestsAssignedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestsAssignedInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutRequestsInput = {
    create?: XOR<TeamCreateWithoutRequestsInput, TeamUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutRequestsInput
    connect?: TeamWhereUniqueInput
  }

  export type RequestEventCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestEventCreateWithoutRequestInput, RequestEventUncheckedCreateWithoutRequestInput> | RequestEventCreateWithoutRequestInput[] | RequestEventUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutRequestInput | RequestEventCreateOrConnectWithoutRequestInput[]
    createMany?: RequestEventCreateManyRequestInputEnvelope
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutRequestInput = {
    create?: XOR<AttachmentCreateWithoutRequestInput, AttachmentUncheckedCreateWithoutRequestInput> | AttachmentCreateWithoutRequestInput[] | AttachmentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutRequestInput | AttachmentCreateOrConnectWithoutRequestInput[]
    createMany?: AttachmentCreateManyRequestInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutRequestInput = {
    create?: XOR<SubscriptionCreateWithoutRequestInput, SubscriptionUncheckedCreateWithoutRequestInput> | SubscriptionCreateWithoutRequestInput[] | SubscriptionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutRequestInput | SubscriptionCreateOrConnectWithoutRequestInput[]
    createMany?: SubscriptionCreateManyRequestInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type RequestEventUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestEventCreateWithoutRequestInput, RequestEventUncheckedCreateWithoutRequestInput> | RequestEventCreateWithoutRequestInput[] | RequestEventUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutRequestInput | RequestEventCreateOrConnectWithoutRequestInput[]
    createMany?: RequestEventCreateManyRequestInputEnvelope
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<AttachmentCreateWithoutRequestInput, AttachmentUncheckedCreateWithoutRequestInput> | AttachmentCreateWithoutRequestInput[] | AttachmentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutRequestInput | AttachmentCreateOrConnectWithoutRequestInput[]
    createMany?: AttachmentCreateManyRequestInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<SubscriptionCreateWithoutRequestInput, SubscriptionUncheckedCreateWithoutRequestInput> | SubscriptionCreateWithoutRequestInput[] | SubscriptionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutRequestInput | SubscriptionCreateOrConnectWithoutRequestInput[]
    createMany?: SubscriptionCreateManyRequestInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type RequestTypeUpdateOneRequiredWithoutRequestsNestedInput = {
    create?: XOR<RequestTypeCreateWithoutRequestsInput, RequestTypeUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: RequestTypeCreateOrConnectWithoutRequestsInput
    upsert?: RequestTypeUpsertWithoutRequestsInput
    connect?: RequestTypeWhereUniqueInput
    update?: XOR<XOR<RequestTypeUpdateToOneWithWhereWithoutRequestsInput, RequestTypeUpdateWithoutRequestsInput>, RequestTypeUncheckedUpdateWithoutRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutRequestsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutRequestsCreatedInput, UserUncheckedCreateWithoutRequestsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestsCreatedInput
    upsert?: UserUpsertWithoutRequestsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestsCreatedInput, UserUpdateWithoutRequestsCreatedInput>, UserUncheckedUpdateWithoutRequestsCreatedInput>
  }

  export type UserUpdateOneWithoutRequestsAssignedNestedInput = {
    create?: XOR<UserCreateWithoutRequestsAssignedInput, UserUncheckedCreateWithoutRequestsAssignedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestsAssignedInput
    upsert?: UserUpsertWithoutRequestsAssignedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestsAssignedInput, UserUpdateWithoutRequestsAssignedInput>, UserUncheckedUpdateWithoutRequestsAssignedInput>
  }

  export type TeamUpdateOneWithoutRequestsNestedInput = {
    create?: XOR<TeamCreateWithoutRequestsInput, TeamUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutRequestsInput
    upsert?: TeamUpsertWithoutRequestsInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutRequestsInput, TeamUpdateWithoutRequestsInput>, TeamUncheckedUpdateWithoutRequestsInput>
  }

  export type RequestEventUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestEventCreateWithoutRequestInput, RequestEventUncheckedCreateWithoutRequestInput> | RequestEventCreateWithoutRequestInput[] | RequestEventUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutRequestInput | RequestEventCreateOrConnectWithoutRequestInput[]
    upsert?: RequestEventUpsertWithWhereUniqueWithoutRequestInput | RequestEventUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestEventCreateManyRequestInputEnvelope
    set?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    disconnect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    delete?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    update?: RequestEventUpdateWithWhereUniqueWithoutRequestInput | RequestEventUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestEventUpdateManyWithWhereWithoutRequestInput | RequestEventUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestEventScalarWhereInput | RequestEventScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutRequestNestedInput = {
    create?: XOR<AttachmentCreateWithoutRequestInput, AttachmentUncheckedCreateWithoutRequestInput> | AttachmentCreateWithoutRequestInput[] | AttachmentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutRequestInput | AttachmentCreateOrConnectWithoutRequestInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutRequestInput | AttachmentUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: AttachmentCreateManyRequestInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutRequestInput | AttachmentUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutRequestInput | AttachmentUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutRequestNestedInput = {
    create?: XOR<SubscriptionCreateWithoutRequestInput, SubscriptionUncheckedCreateWithoutRequestInput> | SubscriptionCreateWithoutRequestInput[] | SubscriptionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutRequestInput | SubscriptionCreateOrConnectWithoutRequestInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutRequestInput | SubscriptionUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: SubscriptionCreateManyRequestInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutRequestInput | SubscriptionUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutRequestInput | SubscriptionUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type RequestEventUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestEventCreateWithoutRequestInput, RequestEventUncheckedCreateWithoutRequestInput> | RequestEventCreateWithoutRequestInput[] | RequestEventUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestEventCreateOrConnectWithoutRequestInput | RequestEventCreateOrConnectWithoutRequestInput[]
    upsert?: RequestEventUpsertWithWhereUniqueWithoutRequestInput | RequestEventUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestEventCreateManyRequestInputEnvelope
    set?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    disconnect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    delete?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    connect?: RequestEventWhereUniqueInput | RequestEventWhereUniqueInput[]
    update?: RequestEventUpdateWithWhereUniqueWithoutRequestInput | RequestEventUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestEventUpdateManyWithWhereWithoutRequestInput | RequestEventUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestEventScalarWhereInput | RequestEventScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<AttachmentCreateWithoutRequestInput, AttachmentUncheckedCreateWithoutRequestInput> | AttachmentCreateWithoutRequestInput[] | AttachmentUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutRequestInput | AttachmentCreateOrConnectWithoutRequestInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutRequestInput | AttachmentUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: AttachmentCreateManyRequestInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutRequestInput | AttachmentUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutRequestInput | AttachmentUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<SubscriptionCreateWithoutRequestInput, SubscriptionUncheckedCreateWithoutRequestInput> | SubscriptionCreateWithoutRequestInput[] | SubscriptionUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutRequestInput | SubscriptionCreateOrConnectWithoutRequestInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutRequestInput | SubscriptionUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: SubscriptionCreateManyRequestInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutRequestInput | SubscriptionUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutRequestInput | SubscriptionUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type RequestCreateNestedOneWithoutEventsInput = {
    create?: XOR<RequestCreateWithoutEventsInput, RequestUncheckedCreateWithoutEventsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutEventsInput
    connect?: RequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type RequestUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<RequestCreateWithoutEventsInput, RequestUncheckedCreateWithoutEventsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutEventsInput
    upsert?: RequestUpsertWithoutEventsInput
    connect?: RequestWhereUniqueInput
    update?: XOR<XOR<RequestUpdateToOneWithWhereWithoutEventsInput, RequestUpdateWithoutEventsInput>, RequestUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsInput, UserUpdateWithoutEventsInput>, UserUncheckedUpdateWithoutEventsInput>
  }

  export type RequestCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<RequestCreateWithoutAttachmentsInput, RequestUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutAttachmentsInput
    connect?: RequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttachmentsUploadedInput = {
    create?: XOR<UserCreateWithoutAttachmentsUploadedInput, UserUncheckedCreateWithoutAttachmentsUploadedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsUploadedInput
    connect?: UserWhereUniqueInput
  }

  export type RequestUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<RequestCreateWithoutAttachmentsInput, RequestUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutAttachmentsInput
    upsert?: RequestUpsertWithoutAttachmentsInput
    connect?: RequestWhereUniqueInput
    update?: XOR<XOR<RequestUpdateToOneWithWhereWithoutAttachmentsInput, RequestUpdateWithoutAttachmentsInput>, RequestUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAttachmentsUploadedNestedInput = {
    create?: XOR<UserCreateWithoutAttachmentsUploadedInput, UserUncheckedCreateWithoutAttachmentsUploadedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsUploadedInput
    upsert?: UserUpsertWithoutAttachmentsUploadedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttachmentsUploadedInput, UserUpdateWithoutAttachmentsUploadedInput>, UserUncheckedUpdateWithoutAttachmentsUploadedInput>
  }

  export type TeamCreateNestedOneWithoutSlaConfigsInput = {
    create?: XOR<TeamCreateWithoutSlaConfigsInput, TeamUncheckedCreateWithoutSlaConfigsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSlaConfigsInput
    connect?: TeamWhereUniqueInput
  }

  export type RequestTypeCreateNestedOneWithoutSlaConfigsInput = {
    create?: XOR<RequestTypeCreateWithoutSlaConfigsInput, RequestTypeUncheckedCreateWithoutSlaConfigsInput>
    connectOrCreate?: RequestTypeCreateOrConnectWithoutSlaConfigsInput
    connect?: RequestTypeWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutSlaConfigsNestedInput = {
    create?: XOR<TeamCreateWithoutSlaConfigsInput, TeamUncheckedCreateWithoutSlaConfigsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSlaConfigsInput
    upsert?: TeamUpsertWithoutSlaConfigsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSlaConfigsInput, TeamUpdateWithoutSlaConfigsInput>, TeamUncheckedUpdateWithoutSlaConfigsInput>
  }

  export type RequestTypeUpdateOneRequiredWithoutSlaConfigsNestedInput = {
    create?: XOR<RequestTypeCreateWithoutSlaConfigsInput, RequestTypeUncheckedCreateWithoutSlaConfigsInput>
    connectOrCreate?: RequestTypeCreateOrConnectWithoutSlaConfigsInput
    upsert?: RequestTypeUpsertWithoutSlaConfigsInput
    connect?: RequestTypeWhereUniqueInput
    update?: XOR<XOR<RequestTypeUpdateToOneWithWhereWithoutSlaConfigsInput, RequestTypeUpdateWithoutSlaConfigsInput>, RequestTypeUncheckedUpdateWithoutSlaConfigsInput>
  }

  export type TeamCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<TeamCreateWithoutSchedulesInput, TeamUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedulesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<TeamCreateWithoutSchedulesInput, TeamUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSchedulesInput
    upsert?: TeamUpsertWithoutSchedulesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSchedulesInput, TeamUpdateWithoutSchedulesInput>, TeamUncheckedUpdateWithoutSchedulesInput>
  }

  export type RequestCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<RequestCreateWithoutSubscriptionsInput, RequestUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutSubscriptionsInput
    connect?: RequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type RequestUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<RequestCreateWithoutSubscriptionsInput, RequestUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: RequestCreateOrConnectWithoutSubscriptionsInput
    upsert?: RequestUpsertWithoutSubscriptionsInput
    connect?: RequestWhereUniqueInput
    update?: XOR<XOR<RequestUpdateToOneWithWhereWithoutSubscriptionsInput, RequestUpdateWithoutSubscriptionsInput>, RequestUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    upsert?: UserUpsertWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionsInput, UserUpdateWithoutSubscriptionsInput>, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TeamCreateWithoutUsersInput = {
    id?: string
    name: string
    slaConfigs?: SLAConfigCreateNestedManyWithoutTeamInput
    schedules?: ScheduleCreateNestedManyWithoutTeamInput
    requests?: RequestCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    slaConfigs?: SLAConfigUncheckedCreateNestedManyWithoutTeamInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutTeamInput
    requests?: RequestUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutUsersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
  }

  export type RequestCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutCreatedByInput = {
    id?: string
    typeId: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutCreatedByInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutCreatedByInput, RequestUncheckedCreateWithoutCreatedByInput>
  }

  export type RequestCreateManyCreatedByInputEnvelope = {
    data: RequestCreateManyCreatedByInput | RequestCreateManyCreatedByInput[]
  }

  export type RequestCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutAssigneeInput = {
    id?: string
    typeId: string
    createdById: string
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutAssigneeInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutAssigneeInput, RequestUncheckedCreateWithoutAssigneeInput>
  }

  export type RequestCreateManyAssigneeInputEnvelope = {
    data: RequestCreateManyAssigneeInput | RequestCreateManyAssigneeInput[]
  }

  export type RequestEventCreateWithoutActorInput = {
    id?: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutEventsInput
  }

  export type RequestEventUncheckedCreateWithoutActorInput = {
    id?: string
    requestId: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
  }

  export type RequestEventCreateOrConnectWithoutActorInput = {
    where: RequestEventWhereUniqueInput
    create: XOR<RequestEventCreateWithoutActorInput, RequestEventUncheckedCreateWithoutActorInput>
  }

  export type RequestEventCreateManyActorInputEnvelope = {
    data: RequestEventCreateManyActorInput | RequestEventCreateManyActorInput[]
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    request: RequestCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    requestId: string
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionCreateManyUserInputEnvelope = {
    data: SubscriptionCreateManyUserInput | SubscriptionCreateManyUserInput[]
  }

  export type AttachmentCreateWithoutUploadedByInput = {
    id?: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
    request: RequestCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    requestId: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
  }

  export type AttachmentCreateOrConnectWithoutUploadedByInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type AttachmentCreateManyUploadedByInputEnvelope = {
    data: AttachmentCreateManyUploadedByInput | AttachmentCreateManyUploadedByInput[]
  }

  export type TeamUpsertWithoutUsersInput = {
    update: XOR<TeamUpdateWithoutUsersInput, TeamUncheckedUpdateWithoutUsersInput>
    create: XOR<TeamCreateWithoutUsersInput, TeamUncheckedCreateWithoutUsersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutUsersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutUsersInput, TeamUncheckedUpdateWithoutUsersInput>
  }

  export type TeamUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slaConfigs?: SLAConfigUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUpdateManyWithoutTeamNestedInput
    requests?: RequestUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slaConfigs?: SLAConfigUncheckedUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutTeamNestedInput
    requests?: RequestUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type RequestUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RequestWhereUniqueInput
    update: XOR<RequestUpdateWithoutCreatedByInput, RequestUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RequestCreateWithoutCreatedByInput, RequestUncheckedCreateWithoutCreatedByInput>
  }

  export type RequestUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RequestWhereUniqueInput
    data: XOR<RequestUpdateWithoutCreatedByInput, RequestUncheckedUpdateWithoutCreatedByInput>
  }

  export type RequestUpdateManyWithWhereWithoutCreatedByInput = {
    where: RequestScalarWhereInput
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RequestScalarWhereInput = {
    AND?: RequestScalarWhereInput | RequestScalarWhereInput[]
    OR?: RequestScalarWhereInput[]
    NOT?: RequestScalarWhereInput | RequestScalarWhereInput[]
    id?: StringFilter<"Request"> | string
    typeId?: StringFilter<"Request"> | string
    createdById?: StringFilter<"Request"> | string
    assigneeId?: StringNullableFilter<"Request"> | string | null
    teamId?: StringNullableFilter<"Request"> | string | null
    title?: StringFilter<"Request"> | string
    description?: StringFilter<"Request"> | string
    priority?: StringFilter<"Request"> | string
    currentStatus?: StringFilter<"Request"> | string
    metadataJson?: StringFilter<"Request"> | string
    dueAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    slaBreachAt?: DateTimeNullableFilter<"Request"> | Date | string | null
    createdAt?: DateTimeFilter<"Request"> | Date | string
    updatedAt?: DateTimeFilter<"Request"> | Date | string
  }

  export type RequestUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: RequestWhereUniqueInput
    update: XOR<RequestUpdateWithoutAssigneeInput, RequestUncheckedUpdateWithoutAssigneeInput>
    create: XOR<RequestCreateWithoutAssigneeInput, RequestUncheckedCreateWithoutAssigneeInput>
  }

  export type RequestUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: RequestWhereUniqueInput
    data: XOR<RequestUpdateWithoutAssigneeInput, RequestUncheckedUpdateWithoutAssigneeInput>
  }

  export type RequestUpdateManyWithWhereWithoutAssigneeInput = {
    where: RequestScalarWhereInput
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type RequestEventUpsertWithWhereUniqueWithoutActorInput = {
    where: RequestEventWhereUniqueInput
    update: XOR<RequestEventUpdateWithoutActorInput, RequestEventUncheckedUpdateWithoutActorInput>
    create: XOR<RequestEventCreateWithoutActorInput, RequestEventUncheckedCreateWithoutActorInput>
  }

  export type RequestEventUpdateWithWhereUniqueWithoutActorInput = {
    where: RequestEventWhereUniqueInput
    data: XOR<RequestEventUpdateWithoutActorInput, RequestEventUncheckedUpdateWithoutActorInput>
  }

  export type RequestEventUpdateManyWithWhereWithoutActorInput = {
    where: RequestEventScalarWhereInput
    data: XOR<RequestEventUpdateManyMutationInput, RequestEventUncheckedUpdateManyWithoutActorInput>
  }

  export type RequestEventScalarWhereInput = {
    AND?: RequestEventScalarWhereInput | RequestEventScalarWhereInput[]
    OR?: RequestEventScalarWhereInput[]
    NOT?: RequestEventScalarWhereInput | RequestEventScalarWhereInput[]
    id?: StringFilter<"RequestEvent"> | string
    requestId?: StringFilter<"RequestEvent"> | string
    actorId?: StringFilter<"RequestEvent"> | string
    eventType?: StringFilter<"RequestEvent"> | string
    payloadJson?: StringFilter<"RequestEvent"> | string
    createdAt?: DateTimeFilter<"RequestEvent"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    requestId?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
  }

  export type AttachmentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutUploadedByInput, AttachmentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutUploadedByInput, AttachmentUncheckedUpdateWithoutUploadedByInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutUploadedByInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type AttachmentScalarWhereInput = {
    AND?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    OR?: AttachmentScalarWhereInput[]
    NOT?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    id?: StringFilter<"Attachment"> | string
    requestId?: StringFilter<"Attachment"> | string
    uploadedById?: StringFilter<"Attachment"> | string
    url?: StringFilter<"Attachment"> | string
    name?: StringFilter<"Attachment"> | string
    size?: IntFilter<"Attachment"> | number
    mime?: StringFilter<"Attachment"> | string
    createdAt?: DateTimeFilter<"Attachment"> | Date | string
  }

  export type UserCreateWithoutTeamInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestCreateNestedManyWithoutAssigneeInput
    events?: RequestEventCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutTeamInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestUncheckedCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestUncheckedCreateNestedManyWithoutAssigneeInput
    events?: RequestEventUncheckedCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutTeamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type UserCreateManyTeamInputEnvelope = {
    data: UserCreateManyTeamInput | UserCreateManyTeamInput[]
  }

  export type SLAConfigCreateWithoutTeamInput = {
    id?: string
    priority: string
    targetMinutes: number
    type: RequestTypeCreateNestedOneWithoutSlaConfigsInput
  }

  export type SLAConfigUncheckedCreateWithoutTeamInput = {
    id?: string
    typeId: string
    priority: string
    targetMinutes: number
  }

  export type SLAConfigCreateOrConnectWithoutTeamInput = {
    where: SLAConfigWhereUniqueInput
    create: XOR<SLAConfigCreateWithoutTeamInput, SLAConfigUncheckedCreateWithoutTeamInput>
  }

  export type SLAConfigCreateManyTeamInputEnvelope = {
    data: SLAConfigCreateManyTeamInput | SLAConfigCreateManyTeamInput[]
  }

  export type ScheduleCreateWithoutTeamInput = {
    id?: string
    tz: string
    workdaysJson: string
    holidaysJson: string
  }

  export type ScheduleUncheckedCreateWithoutTeamInput = {
    id?: string
    tz: string
    workdaysJson: string
    holidaysJson: string
  }

  export type ScheduleCreateOrConnectWithoutTeamInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutTeamInput, ScheduleUncheckedCreateWithoutTeamInput>
  }

  export type ScheduleCreateManyTeamInputEnvelope = {
    data: ScheduleCreateManyTeamInput | ScheduleCreateManyTeamInput[]
  }

  export type RequestCreateWithoutTeamInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutTeamInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutTeamInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutTeamInput, RequestUncheckedCreateWithoutTeamInput>
  }

  export type RequestCreateManyTeamInputEnvelope = {
    data: RequestCreateManyTeamInput | RequestCreateManyTeamInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutTeamInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeamInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
  }

  export type UserUpdateManyWithWhereWithoutTeamInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeamInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    teamId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type SLAConfigUpsertWithWhereUniqueWithoutTeamInput = {
    where: SLAConfigWhereUniqueInput
    update: XOR<SLAConfigUpdateWithoutTeamInput, SLAConfigUncheckedUpdateWithoutTeamInput>
    create: XOR<SLAConfigCreateWithoutTeamInput, SLAConfigUncheckedCreateWithoutTeamInput>
  }

  export type SLAConfigUpdateWithWhereUniqueWithoutTeamInput = {
    where: SLAConfigWhereUniqueInput
    data: XOR<SLAConfigUpdateWithoutTeamInput, SLAConfigUncheckedUpdateWithoutTeamInput>
  }

  export type SLAConfigUpdateManyWithWhereWithoutTeamInput = {
    where: SLAConfigScalarWhereInput
    data: XOR<SLAConfigUpdateManyMutationInput, SLAConfigUncheckedUpdateManyWithoutTeamInput>
  }

  export type SLAConfigScalarWhereInput = {
    AND?: SLAConfigScalarWhereInput | SLAConfigScalarWhereInput[]
    OR?: SLAConfigScalarWhereInput[]
    NOT?: SLAConfigScalarWhereInput | SLAConfigScalarWhereInput[]
    id?: StringFilter<"SLAConfig"> | string
    teamId?: StringFilter<"SLAConfig"> | string
    typeId?: StringFilter<"SLAConfig"> | string
    priority?: StringFilter<"SLAConfig"> | string
    targetMinutes?: IntFilter<"SLAConfig"> | number
  }

  export type ScheduleUpsertWithWhereUniqueWithoutTeamInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutTeamInput, ScheduleUncheckedUpdateWithoutTeamInput>
    create: XOR<ScheduleCreateWithoutTeamInput, ScheduleUncheckedCreateWithoutTeamInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutTeamInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutTeamInput, ScheduleUncheckedUpdateWithoutTeamInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutTeamInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutTeamInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: StringFilter<"Schedule"> | string
    teamId?: StringFilter<"Schedule"> | string
    tz?: StringFilter<"Schedule"> | string
    workdaysJson?: StringFilter<"Schedule"> | string
    holidaysJson?: StringFilter<"Schedule"> | string
  }

  export type RequestUpsertWithWhereUniqueWithoutTeamInput = {
    where: RequestWhereUniqueInput
    update: XOR<RequestUpdateWithoutTeamInput, RequestUncheckedUpdateWithoutTeamInput>
    create: XOR<RequestCreateWithoutTeamInput, RequestUncheckedCreateWithoutTeamInput>
  }

  export type RequestUpdateWithWhereUniqueWithoutTeamInput = {
    where: RequestWhereUniqueInput
    data: XOR<RequestUpdateWithoutTeamInput, RequestUncheckedUpdateWithoutTeamInput>
  }

  export type RequestUpdateManyWithWhereWithoutTeamInput = {
    where: RequestScalarWhereInput
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyWithoutTeamInput>
  }

  export type RequestCreateWithoutTypeInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutTypeInput = {
    id?: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutTypeInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutTypeInput, RequestUncheckedCreateWithoutTypeInput>
  }

  export type RequestCreateManyTypeInputEnvelope = {
    data: RequestCreateManyTypeInput | RequestCreateManyTypeInput[]
  }

  export type SLAConfigCreateWithoutTypeInput = {
    id?: string
    priority: string
    targetMinutes: number
    team: TeamCreateNestedOneWithoutSlaConfigsInput
  }

  export type SLAConfigUncheckedCreateWithoutTypeInput = {
    id?: string
    teamId: string
    priority: string
    targetMinutes: number
  }

  export type SLAConfigCreateOrConnectWithoutTypeInput = {
    where: SLAConfigWhereUniqueInput
    create: XOR<SLAConfigCreateWithoutTypeInput, SLAConfigUncheckedCreateWithoutTypeInput>
  }

  export type SLAConfigCreateManyTypeInputEnvelope = {
    data: SLAConfigCreateManyTypeInput | SLAConfigCreateManyTypeInput[]
  }

  export type RequestUpsertWithWhereUniqueWithoutTypeInput = {
    where: RequestWhereUniqueInput
    update: XOR<RequestUpdateWithoutTypeInput, RequestUncheckedUpdateWithoutTypeInput>
    create: XOR<RequestCreateWithoutTypeInput, RequestUncheckedCreateWithoutTypeInput>
  }

  export type RequestUpdateWithWhereUniqueWithoutTypeInput = {
    where: RequestWhereUniqueInput
    data: XOR<RequestUpdateWithoutTypeInput, RequestUncheckedUpdateWithoutTypeInput>
  }

  export type RequestUpdateManyWithWhereWithoutTypeInput = {
    where: RequestScalarWhereInput
    data: XOR<RequestUpdateManyMutationInput, RequestUncheckedUpdateManyWithoutTypeInput>
  }

  export type SLAConfigUpsertWithWhereUniqueWithoutTypeInput = {
    where: SLAConfigWhereUniqueInput
    update: XOR<SLAConfigUpdateWithoutTypeInput, SLAConfigUncheckedUpdateWithoutTypeInput>
    create: XOR<SLAConfigCreateWithoutTypeInput, SLAConfigUncheckedCreateWithoutTypeInput>
  }

  export type SLAConfigUpdateWithWhereUniqueWithoutTypeInput = {
    where: SLAConfigWhereUniqueInput
    data: XOR<SLAConfigUpdateWithoutTypeInput, SLAConfigUncheckedUpdateWithoutTypeInput>
  }

  export type SLAConfigUpdateManyWithWhereWithoutTypeInput = {
    where: SLAConfigScalarWhereInput
    data: XOR<SLAConfigUpdateManyMutationInput, SLAConfigUncheckedUpdateManyWithoutTypeInput>
  }

  export type RequestTypeCreateWithoutRequestsInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
    slaConfigs?: SLAConfigCreateNestedManyWithoutTypeInput
  }

  export type RequestTypeUncheckedCreateWithoutRequestsInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
    slaConfigs?: SLAConfigUncheckedCreateNestedManyWithoutTypeInput
  }

  export type RequestTypeCreateOrConnectWithoutRequestsInput = {
    where: RequestTypeWhereUniqueInput
    create: XOR<RequestTypeCreateWithoutRequestsInput, RequestTypeUncheckedCreateWithoutRequestsInput>
  }

  export type UserCreateWithoutRequestsCreatedInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedOneWithoutUsersInput
    requestsAssigned?: RequestCreateNestedManyWithoutAssigneeInput
    events?: RequestEventCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutRequestsCreatedInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsAssigned?: RequestUncheckedCreateNestedManyWithoutAssigneeInput
    events?: RequestEventUncheckedCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutRequestsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestsCreatedInput, UserUncheckedCreateWithoutRequestsCreatedInput>
  }

  export type UserCreateWithoutRequestsAssignedInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedOneWithoutUsersInput
    requestsCreated?: RequestCreateNestedManyWithoutCreatedByInput
    events?: RequestEventCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutRequestsAssignedInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestUncheckedCreateNestedManyWithoutCreatedByInput
    events?: RequestEventUncheckedCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutRequestsAssignedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestsAssignedInput, UserUncheckedCreateWithoutRequestsAssignedInput>
  }

  export type TeamCreateWithoutRequestsInput = {
    id?: string
    name: string
    users?: UserCreateNestedManyWithoutTeamInput
    slaConfigs?: SLAConfigCreateNestedManyWithoutTeamInput
    schedules?: ScheduleCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutRequestsInput = {
    id?: string
    name: string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    slaConfigs?: SLAConfigUncheckedCreateNestedManyWithoutTeamInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutRequestsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutRequestsInput, TeamUncheckedCreateWithoutRequestsInput>
  }

  export type RequestEventCreateWithoutRequestInput = {
    id?: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
    actor: UserCreateNestedOneWithoutEventsInput
  }

  export type RequestEventUncheckedCreateWithoutRequestInput = {
    id?: string
    actorId: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
  }

  export type RequestEventCreateOrConnectWithoutRequestInput = {
    where: RequestEventWhereUniqueInput
    create: XOR<RequestEventCreateWithoutRequestInput, RequestEventUncheckedCreateWithoutRequestInput>
  }

  export type RequestEventCreateManyRequestInputEnvelope = {
    data: RequestEventCreateManyRequestInput | RequestEventCreateManyRequestInput[]
  }

  export type AttachmentCreateWithoutRequestInput = {
    id?: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutAttachmentsUploadedInput
  }

  export type AttachmentUncheckedCreateWithoutRequestInput = {
    id?: string
    uploadedById: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
  }

  export type AttachmentCreateOrConnectWithoutRequestInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutRequestInput, AttachmentUncheckedCreateWithoutRequestInput>
  }

  export type AttachmentCreateManyRequestInputEnvelope = {
    data: AttachmentCreateManyRequestInput | AttachmentCreateManyRequestInput[]
  }

  export type SubscriptionCreateWithoutRequestInput = {
    id?: string
    user: UserCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutRequestInput = {
    id?: string
    userId: string
  }

  export type SubscriptionCreateOrConnectWithoutRequestInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutRequestInput, SubscriptionUncheckedCreateWithoutRequestInput>
  }

  export type SubscriptionCreateManyRequestInputEnvelope = {
    data: SubscriptionCreateManyRequestInput | SubscriptionCreateManyRequestInput[]
  }

  export type RequestTypeUpsertWithoutRequestsInput = {
    update: XOR<RequestTypeUpdateWithoutRequestsInput, RequestTypeUncheckedUpdateWithoutRequestsInput>
    create: XOR<RequestTypeCreateWithoutRequestsInput, RequestTypeUncheckedCreateWithoutRequestsInput>
    where?: RequestTypeWhereInput
  }

  export type RequestTypeUpdateToOneWithWhereWithoutRequestsInput = {
    where?: RequestTypeWhereInput
    data: XOR<RequestTypeUpdateWithoutRequestsInput, RequestTypeUncheckedUpdateWithoutRequestsInput>
  }

  export type RequestTypeUpdateWithoutRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
    slaConfigs?: SLAConfigUpdateManyWithoutTypeNestedInput
  }

  export type RequestTypeUncheckedUpdateWithoutRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
    slaConfigs?: SLAConfigUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type UserUpsertWithoutRequestsCreatedInput = {
    update: XOR<UserUpdateWithoutRequestsCreatedInput, UserUncheckedUpdateWithoutRequestsCreatedInput>
    create: XOR<UserCreateWithoutRequestsCreatedInput, UserUncheckedCreateWithoutRequestsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestsCreatedInput, UserUncheckedUpdateWithoutRequestsCreatedInput>
  }

  export type UserUpdateWithoutRequestsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutUsersNestedInput
    requestsAssigned?: RequestUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsAssigned?: RequestUncheckedUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUncheckedUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUpsertWithoutRequestsAssignedInput = {
    update: XOR<UserUpdateWithoutRequestsAssignedInput, UserUncheckedUpdateWithoutRequestsAssignedInput>
    create: XOR<UserCreateWithoutRequestsAssignedInput, UserUncheckedCreateWithoutRequestsAssignedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestsAssignedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestsAssignedInput, UserUncheckedUpdateWithoutRequestsAssignedInput>
  }

  export type UserUpdateWithoutRequestsAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutUsersNestedInput
    requestsCreated?: RequestUpdateManyWithoutCreatedByNestedInput
    events?: RequestEventUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestsAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUncheckedUpdateManyWithoutCreatedByNestedInput
    events?: RequestEventUncheckedUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type TeamUpsertWithoutRequestsInput = {
    update: XOR<TeamUpdateWithoutRequestsInput, TeamUncheckedUpdateWithoutRequestsInput>
    create: XOR<TeamCreateWithoutRequestsInput, TeamUncheckedCreateWithoutRequestsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutRequestsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutRequestsInput, TeamUncheckedUpdateWithoutRequestsInput>
  }

  export type TeamUpdateWithoutRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTeamNestedInput
    slaConfigs?: SLAConfigUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    slaConfigs?: SLAConfigUncheckedUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type RequestEventUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestEventWhereUniqueInput
    update: XOR<RequestEventUpdateWithoutRequestInput, RequestEventUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestEventCreateWithoutRequestInput, RequestEventUncheckedCreateWithoutRequestInput>
  }

  export type RequestEventUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestEventWhereUniqueInput
    data: XOR<RequestEventUpdateWithoutRequestInput, RequestEventUncheckedUpdateWithoutRequestInput>
  }

  export type RequestEventUpdateManyWithWhereWithoutRequestInput = {
    where: RequestEventScalarWhereInput
    data: XOR<RequestEventUpdateManyMutationInput, RequestEventUncheckedUpdateManyWithoutRequestInput>
  }

  export type AttachmentUpsertWithWhereUniqueWithoutRequestInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutRequestInput, AttachmentUncheckedUpdateWithoutRequestInput>
    create: XOR<AttachmentCreateWithoutRequestInput, AttachmentUncheckedCreateWithoutRequestInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutRequestInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutRequestInput, AttachmentUncheckedUpdateWithoutRequestInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutRequestInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutRequestInput>
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutRequestInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutRequestInput, SubscriptionUncheckedUpdateWithoutRequestInput>
    create: XOR<SubscriptionCreateWithoutRequestInput, SubscriptionUncheckedCreateWithoutRequestInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutRequestInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutRequestInput, SubscriptionUncheckedUpdateWithoutRequestInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutRequestInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutRequestInput>
  }

  export type RequestCreateWithoutEventsInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutEventsInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutEventsInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutEventsInput, RequestUncheckedCreateWithoutEventsInput>
  }

  export type UserCreateWithoutEventsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedOneWithoutUsersInput
    requestsCreated?: RequestCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestCreateNestedManyWithoutAssigneeInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestUncheckedCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestUncheckedCreateNestedManyWithoutAssigneeInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    attachmentsUploaded?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type RequestUpsertWithoutEventsInput = {
    update: XOR<RequestUpdateWithoutEventsInput, RequestUncheckedUpdateWithoutEventsInput>
    create: XOR<RequestCreateWithoutEventsInput, RequestUncheckedCreateWithoutEventsInput>
    where?: RequestWhereInput
  }

  export type RequestUpdateToOneWithWhereWithoutEventsInput = {
    where?: RequestWhereInput
    data: XOR<RequestUpdateWithoutEventsInput, RequestUncheckedUpdateWithoutEventsInput>
  }

  export type RequestUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutUsersNestedInput
    requestsCreated?: RequestUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUpdateManyWithoutAssigneeNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUncheckedUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUncheckedUpdateManyWithoutAssigneeNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type RequestCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutAttachmentsInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutAttachmentsInput, RequestUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserCreateWithoutAttachmentsUploadedInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedOneWithoutUsersInput
    requestsCreated?: RequestCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestCreateNestedManyWithoutAssigneeInput
    events?: RequestEventCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttachmentsUploadedInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestUncheckedCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestUncheckedCreateNestedManyWithoutAssigneeInput
    events?: RequestEventUncheckedCreateNestedManyWithoutActorInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttachmentsUploadedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttachmentsUploadedInput, UserUncheckedCreateWithoutAttachmentsUploadedInput>
  }

  export type RequestUpsertWithoutAttachmentsInput = {
    update: XOR<RequestUpdateWithoutAttachmentsInput, RequestUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<RequestCreateWithoutAttachmentsInput, RequestUncheckedCreateWithoutAttachmentsInput>
    where?: RequestWhereInput
  }

  export type RequestUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: RequestWhereInput
    data: XOR<RequestUpdateWithoutAttachmentsInput, RequestUncheckedUpdateWithoutAttachmentsInput>
  }

  export type RequestUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type UserUpsertWithoutAttachmentsUploadedInput = {
    update: XOR<UserUpdateWithoutAttachmentsUploadedInput, UserUncheckedUpdateWithoutAttachmentsUploadedInput>
    create: XOR<UserCreateWithoutAttachmentsUploadedInput, UserUncheckedCreateWithoutAttachmentsUploadedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttachmentsUploadedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttachmentsUploadedInput, UserUncheckedUpdateWithoutAttachmentsUploadedInput>
  }

  export type UserUpdateWithoutAttachmentsUploadedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutUsersNestedInput
    requestsCreated?: RequestUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttachmentsUploadedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUncheckedUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUncheckedUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUncheckedUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamCreateWithoutSlaConfigsInput = {
    id?: string
    name: string
    users?: UserCreateNestedManyWithoutTeamInput
    schedules?: ScheduleCreateNestedManyWithoutTeamInput
    requests?: RequestCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSlaConfigsInput = {
    id?: string
    name: string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutTeamInput
    requests?: RequestUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSlaConfigsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSlaConfigsInput, TeamUncheckedCreateWithoutSlaConfigsInput>
  }

  export type RequestTypeCreateWithoutSlaConfigsInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
    requests?: RequestCreateNestedManyWithoutTypeInput
  }

  export type RequestTypeUncheckedCreateWithoutSlaConfigsInput = {
    id?: string
    name: string
    schemaJson: string
    defaultSlaMinutes?: number
    requests?: RequestUncheckedCreateNestedManyWithoutTypeInput
  }

  export type RequestTypeCreateOrConnectWithoutSlaConfigsInput = {
    where: RequestTypeWhereUniqueInput
    create: XOR<RequestTypeCreateWithoutSlaConfigsInput, RequestTypeUncheckedCreateWithoutSlaConfigsInput>
  }

  export type TeamUpsertWithoutSlaConfigsInput = {
    update: XOR<TeamUpdateWithoutSlaConfigsInput, TeamUncheckedUpdateWithoutSlaConfigsInput>
    create: XOR<TeamCreateWithoutSlaConfigsInput, TeamUncheckedCreateWithoutSlaConfigsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSlaConfigsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSlaConfigsInput, TeamUncheckedUpdateWithoutSlaConfigsInput>
  }

  export type TeamUpdateWithoutSlaConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUpdateManyWithoutTeamNestedInput
    requests?: RequestUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSlaConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutTeamNestedInput
    requests?: RequestUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type RequestTypeUpsertWithoutSlaConfigsInput = {
    update: XOR<RequestTypeUpdateWithoutSlaConfigsInput, RequestTypeUncheckedUpdateWithoutSlaConfigsInput>
    create: XOR<RequestTypeCreateWithoutSlaConfigsInput, RequestTypeUncheckedCreateWithoutSlaConfigsInput>
    where?: RequestTypeWhereInput
  }

  export type RequestTypeUpdateToOneWithWhereWithoutSlaConfigsInput = {
    where?: RequestTypeWhereInput
    data: XOR<RequestTypeUpdateWithoutSlaConfigsInput, RequestTypeUncheckedUpdateWithoutSlaConfigsInput>
  }

  export type RequestTypeUpdateWithoutSlaConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
    requests?: RequestUpdateManyWithoutTypeNestedInput
  }

  export type RequestTypeUncheckedUpdateWithoutSlaConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    schemaJson?: StringFieldUpdateOperationsInput | string
    defaultSlaMinutes?: IntFieldUpdateOperationsInput | number
    requests?: RequestUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TeamCreateWithoutSchedulesInput = {
    id?: string
    name: string
    users?: UserCreateNestedManyWithoutTeamInput
    slaConfigs?: SLAConfigCreateNestedManyWithoutTeamInput
    requests?: RequestCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSchedulesInput = {
    id?: string
    name: string
    users?: UserUncheckedCreateNestedManyWithoutTeamInput
    slaConfigs?: SLAConfigUncheckedCreateNestedManyWithoutTeamInput
    requests?: RequestUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSchedulesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSchedulesInput, TeamUncheckedCreateWithoutSchedulesInput>
  }

  export type TeamUpsertWithoutSchedulesInput = {
    update: XOR<TeamUpdateWithoutSchedulesInput, TeamUncheckedUpdateWithoutSchedulesInput>
    create: XOR<TeamCreateWithoutSchedulesInput, TeamUncheckedCreateWithoutSchedulesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSchedulesInput, TeamUncheckedUpdateWithoutSchedulesInput>
  }

  export type TeamUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTeamNestedInput
    slaConfigs?: SLAConfigUpdateManyWithoutTeamNestedInput
    requests?: RequestUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTeamNestedInput
    slaConfigs?: SLAConfigUncheckedUpdateManyWithoutTeamNestedInput
    requests?: RequestUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type RequestCreateWithoutSubscriptionsInput = {
    id?: string
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: RequestTypeCreateNestedOneWithoutRequestsInput
    createdBy: UserCreateNestedOneWithoutRequestsCreatedInput
    assignee?: UserCreateNestedOneWithoutRequestsAssignedInput
    team?: TeamCreateNestedOneWithoutRequestsInput
    events?: RequestEventCreateNestedManyWithoutRequestInput
    attachments?: AttachmentCreateNestedManyWithoutRequestInput
  }

  export type RequestUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: RequestEventUncheckedCreateNestedManyWithoutRequestInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutRequestInput
  }

  export type RequestCreateOrConnectWithoutSubscriptionsInput = {
    where: RequestWhereUniqueInput
    create: XOR<RequestCreateWithoutSubscriptionsInput, RequestUncheckedCreateWithoutSubscriptionsInput>
  }

  export type UserCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedOneWithoutUsersInput
    requestsCreated?: RequestCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestCreateNestedManyWithoutAssigneeInput
    events?: RequestEventCreateNestedManyWithoutActorInput
    attachmentsUploaded?: AttachmentCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    teamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestsCreated?: RequestUncheckedCreateNestedManyWithoutCreatedByInput
    requestsAssigned?: RequestUncheckedCreateNestedManyWithoutAssigneeInput
    events?: RequestEventUncheckedCreateNestedManyWithoutActorInput
    attachmentsUploaded?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
  }

  export type RequestUpsertWithoutSubscriptionsInput = {
    update: XOR<RequestUpdateWithoutSubscriptionsInput, RequestUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<RequestCreateWithoutSubscriptionsInput, RequestUncheckedCreateWithoutSubscriptionsInput>
    where?: RequestWhereInput
  }

  export type RequestUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: RequestWhereInput
    data: XOR<RequestUpdateWithoutSubscriptionsInput, RequestUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type RequestUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type UserUpsertWithoutSubscriptionsInput = {
    update: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneWithoutUsersNestedInput
    requestsCreated?: RequestUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUpdateManyWithoutActorNestedInput
    attachmentsUploaded?: AttachmentUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUncheckedUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUncheckedUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUncheckedUpdateManyWithoutActorNestedInput
    attachmentsUploaded?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type RequestCreateManyCreatedByInput = {
    id?: string
    typeId: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestCreateManyAssigneeInput = {
    id?: string
    typeId: string
    createdById: string
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestEventCreateManyActorInput = {
    id?: string
    requestId: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
  }

  export type SubscriptionCreateManyUserInput = {
    id?: string
    requestId: string
  }

  export type AttachmentCreateManyUploadedByInput = {
    id?: string
    requestId: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
  }

  export type RequestUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestEventUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutEventsNestedInput
  }

  export type RequestEventUncheckedUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestEventUncheckedUpdateManyWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    request?: RequestUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
  }

  export type AttachmentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: RequestUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyTeamInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SLAConfigCreateManyTeamInput = {
    id?: string
    typeId: string
    priority: string
    targetMinutes: number
  }

  export type ScheduleCreateManyTeamInput = {
    id?: string
    tz: string
    workdaysJson: string
    holidaysJson: string
  }

  export type RequestCreateManyTeamInput = {
    id?: string
    typeId: string
    createdById: string
    assigneeId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestsCreated?: RequestUncheckedUpdateManyWithoutCreatedByNestedInput
    requestsAssigned?: RequestUncheckedUpdateManyWithoutAssigneeNestedInput
    events?: RequestEventUncheckedUpdateManyWithoutActorNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    attachmentsUploaded?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SLAConfigUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
    type?: RequestTypeUpdateOneRequiredWithoutSlaConfigsNestedInput
  }

  export type SLAConfigUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type SLAConfigUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    tz?: StringFieldUpdateOperationsInput | string
    workdaysJson?: StringFieldUpdateOperationsInput | string
    holidaysJson?: StringFieldUpdateOperationsInput | string
  }

  export type RequestUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: RequestTypeUpdateOneRequiredWithoutRequestsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    typeId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestCreateManyTypeInput = {
    id?: string
    createdById: string
    assigneeId?: string | null
    teamId?: string | null
    title: string
    description: string
    priority?: string
    currentStatus?: string
    metadataJson?: string
    dueAt?: Date | string | null
    slaBreachAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SLAConfigCreateManyTypeInput = {
    id?: string
    teamId: string
    priority: string
    targetMinutes: number
  }

  export type RequestUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutRequestsCreatedNestedInput
    assignee?: UserUpdateOneWithoutRequestsAssignedNestedInput
    team?: TeamUpdateOneWithoutRequestsNestedInput
    events?: RequestEventUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: RequestEventUncheckedUpdateManyWithoutRequestNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutRequestNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type RequestUncheckedUpdateManyWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    currentStatus?: StringFieldUpdateOperationsInput | string
    metadataJson?: StringFieldUpdateOperationsInput | string
    dueAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slaBreachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SLAConfigUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutSlaConfigsNestedInput
  }

  export type SLAConfigUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type SLAConfigUncheckedUpdateManyWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type RequestEventCreateManyRequestInput = {
    id?: string
    actorId: string
    eventType: string
    payloadJson?: string
    createdAt?: Date | string
  }

  export type AttachmentCreateManyRequestInput = {
    id?: string
    uploadedById: string
    url: string
    name: string
    size: number
    mime: string
    createdAt?: Date | string
  }

  export type SubscriptionCreateManyRequestInput = {
    id?: string
    userId: string
  }

  export type RequestEventUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: UserUpdateOneRequiredWithoutEventsNestedInput
  }

  export type RequestEventUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestEventUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payloadJson?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutAttachmentsUploadedNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    mime?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestTypeCountOutputTypeDefaultArgs instead
     */
    export type RequestTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestCountOutputTypeDefaultArgs instead
     */
    export type RequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestTypeDefaultArgs instead
     */
    export type RequestTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestDefaultArgs instead
     */
    export type RequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestEventDefaultArgs instead
     */
    export type RequestEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttachmentDefaultArgs instead
     */
    export type AttachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SLAConfigDefaultArgs instead
     */
    export type SLAConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SLAConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}