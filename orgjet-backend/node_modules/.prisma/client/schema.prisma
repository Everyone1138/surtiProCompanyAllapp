generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("REQUESTER") // string instead of enum
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  requestsCreated     Request[]         @relation("requestsCreated")
  requestsAssigned    Request[]         @relation("requestsAssigned")
  events              RequestEvent[]
  subscriptions       Subscription[]
  attachmentsUploaded Attachment[]      @relation("attachmentsUploaded")
  assignments         RequestAssignee[] // <â€” many-to-many via join table
}

model Team {
  id         String      @id @default(cuid())
  name       String      @unique
  users      User[]
  slaConfigs SLAConfig[]
  schedules  Schedule[]
  requests   Request[]
}

model RequestType {
  id                String @id @default(cuid())
  name              String @unique
  schemaJson        String
  defaultSlaMinutes Int    @default(1440)

  requests   Request[]
  slaConfigs SLAConfig[] // reverse side of SLAConfig.type
}

model Request {
  id     String      @id @default(cuid())
  type   RequestType @relation(fields: [typeId], references: [id])
  typeId String

  createdBy   User   @relation("requestsCreated", fields: [createdById], references: [id])
  createdById String

  // Legacy single assignee (kept for backwards-compat; multi-assignee uses RequestAssignee)
  assignee   User?   @relation("requestsAssigned", fields: [assigneeId], references: [id])
  assigneeId String?

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?

  title         String
  description   String
  company       String?
  companyId     String?
  priority      String    @default("MEDIUM") // string instead of enum
  currentStatus String    @default("NEW") // string instead of enum
  metadataJson  String    @default("{}")
  dueAt         DateTime?
  slaBreachAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  events        RequestEvent[]
  attachments   Attachment[]
  subscriptions Subscription[]

  // Multi-assignee join
  assignments RequestAssignee[]
}

model RequestAssignee {
  id         String   @id @default(cuid())
  requestId  String
  userId     String
  assignedAt DateTime @default(now())

  request Request @relation(fields: [requestId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([requestId, userId])
}

model RequestEvent {
  id          String   @id @default(cuid())
  request     Request  @relation(fields: [requestId], references: [id])
  requestId   String
  actor       User     @relation(fields: [actorId], references: [id])
  actorId     String
  eventType   String
  payloadJson String   @default("{}")
  createdAt   DateTime @default(now())
}

model Attachment {
  id           String   @id @default(cuid())
  request      Request  @relation(fields: [requestId], references: [id])
  requestId    String
  uploadedBy   User     @relation("attachmentsUploaded", fields: [uploadedById], references: [id])
  uploadedById String
  url          String
  name         String
  size         Int
  mime         String
  createdAt    DateTime @default(now())
}

model SLAConfig {
  id            String      @id @default(cuid())
  team          Team        @relation(fields: [teamId], references: [id])
  teamId        String
  type          RequestType @relation(fields: [typeId], references: [id])
  typeId        String
  priority      String // string instead of enum
  targetMinutes Int
}

model Schedule {
  id           String @id @default(cuid())
  team         Team   @relation(fields: [teamId], references: [id])
  teamId       String
  tz           String
  workdaysJson String
  holidaysJson String
}

model Subscription {
  id        String  @id @default(cuid())
  request   Request @relation(fields: [requestId], references: [id])
  requestId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}
